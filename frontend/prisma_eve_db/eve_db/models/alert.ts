
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `alert` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model alert
 * 
 */
export type alertModel = runtime.Types.Result.DefaultSelection<Prisma.$alertPayload>

export type AggregateAlert = {
  _count: AlertCountAggregateOutputType | null
  _avg: AlertAvgAggregateOutputType | null
  _sum: AlertSumAggregateOutputType | null
  _min: AlertMinAggregateOutputType | null
  _max: AlertMaxAggregateOutputType | null
}

export type AlertAvgAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
}

export type AlertSumAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
}

export type AlertMinAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
  extra_data: string | null
}

export type AlertMaxAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
  extra_data: string | null
}

export type AlertCountAggregateOutputType = {
  id: number
  flow_id: number
  timestamp: number
  extra_data: number
  _all: number
}


export type AlertAvgAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
}

export type AlertSumAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
}

export type AlertMinAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
  extra_data?: true
}

export type AlertMaxAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
  extra_data?: true
}

export type AlertCountAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
  extra_data?: true
  _all?: true
}

export type AlertAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which alert to aggregate.
   */
  where?: Prisma.alertWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of alerts to fetch.
   */
  orderBy?: Prisma.alertOrderByWithRelationInput | Prisma.alertOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.alertWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` alerts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` alerts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned alerts
  **/
  _count?: true | AlertCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AlertAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AlertSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AlertMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AlertMaxAggregateInputType
}

export type GetAlertAggregateType<T extends AlertAggregateArgs> = {
      [P in keyof T & keyof AggregateAlert]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAlert[P]>
    : Prisma.GetScalarType<T[P], AggregateAlert[P]>
}




export type alertGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.alertWhereInput
  orderBy?: Prisma.alertOrderByWithAggregationInput | Prisma.alertOrderByWithAggregationInput[]
  by: Prisma.AlertScalarFieldEnum[] | Prisma.AlertScalarFieldEnum
  having?: Prisma.alertScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AlertCountAggregateInputType | true
  _avg?: AlertAvgAggregateInputType
  _sum?: AlertSumAggregateInputType
  _min?: AlertMinAggregateInputType
  _max?: AlertMaxAggregateInputType
}

export type AlertGroupByOutputType = {
  id: number
  flow_id: number
  timestamp: number
  extra_data: string | null
  _count: AlertCountAggregateOutputType | null
  _avg: AlertAvgAggregateOutputType | null
  _sum: AlertSumAggregateOutputType | null
  _min: AlertMinAggregateOutputType | null
  _max: AlertMaxAggregateOutputType | null
}

type GetAlertGroupByPayload<T extends alertGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AlertGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AlertGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AlertGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AlertGroupByOutputType[P]>
      }
    >
  > 



export type alertWhereInput = {
  AND?: Prisma.alertWhereInput | Prisma.alertWhereInput[]
  OR?: Prisma.alertWhereInput[]
  NOT?: Prisma.alertWhereInput | Prisma.alertWhereInput[]
  id?: Prisma.IntFilter<"alert"> | number
  flow_id?: Prisma.IntFilter<"alert"> | number
  timestamp?: Prisma.IntFilter<"alert"> | number
  extra_data?: Prisma.StringNullableFilter<"alert"> | string | null
}

export type alertOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type alertWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.alertWhereInput | Prisma.alertWhereInput[]
  OR?: Prisma.alertWhereInput[]
  NOT?: Prisma.alertWhereInput | Prisma.alertWhereInput[]
  flow_id?: Prisma.IntFilter<"alert"> | number
  timestamp?: Prisma.IntFilter<"alert"> | number
  extra_data?: Prisma.StringNullableFilter<"alert"> | string | null
}, "id">

export type alertOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.alertCountOrderByAggregateInput
  _avg?: Prisma.alertAvgOrderByAggregateInput
  _max?: Prisma.alertMaxOrderByAggregateInput
  _min?: Prisma.alertMinOrderByAggregateInput
  _sum?: Prisma.alertSumOrderByAggregateInput
}

export type alertScalarWhereWithAggregatesInput = {
  AND?: Prisma.alertScalarWhereWithAggregatesInput | Prisma.alertScalarWhereWithAggregatesInput[]
  OR?: Prisma.alertScalarWhereWithAggregatesInput[]
  NOT?: Prisma.alertScalarWhereWithAggregatesInput | Prisma.alertScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"alert"> | number
  flow_id?: Prisma.IntWithAggregatesFilter<"alert"> | number
  timestamp?: Prisma.IntWithAggregatesFilter<"alert"> | number
  extra_data?: Prisma.StringNullableWithAggregatesFilter<"alert"> | string | null
}

export type alertCreateInput = {
  flow_id: number
  timestamp: number
  extra_data?: string | null
}

export type alertUncheckedCreateInput = {
  id?: number
  flow_id: number
  timestamp: number
  extra_data?: string | null
}

export type alertUpdateInput = {
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type alertUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type alertCreateManyInput = {
  id?: number
  flow_id: number
  timestamp: number
  extra_data?: string | null
}

export type alertUpdateManyMutationInput = {
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type alertUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type alertCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type alertAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type alertMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type alertMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type alertSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}



export type alertSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["alert"]>

export type alertSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["alert"]>

export type alertSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["alert"]>

export type alertSelectScalar = {
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  extra_data?: boolean
}

export type alertOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "flow_id" | "timestamp" | "extra_data", ExtArgs["result"]["alert"]>

export type $alertPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "alert"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    flow_id: number
    timestamp: number
    extra_data: string | null
  }, ExtArgs["result"]["alert"]>
  composites: {}
}

export type alertGetPayload<S extends boolean | null | undefined | alertDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$alertPayload, S>

export type alertCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<alertFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AlertCountAggregateInputType | true
  }

export interface alertDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['alert'], meta: { name: 'alert' } }
  /**
   * Find zero or one Alert that matches the filter.
   * @param {alertFindUniqueArgs} args - Arguments to find a Alert
   * @example
   * // Get one Alert
   * const alert = await prisma.alert.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends alertFindUniqueArgs>(args: Prisma.SelectSubset<T, alertFindUniqueArgs<ExtArgs>>): Prisma.Prisma__alertClient<runtime.Types.Result.GetResult<Prisma.$alertPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Alert that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {alertFindUniqueOrThrowArgs} args - Arguments to find a Alert
   * @example
   * // Get one Alert
   * const alert = await prisma.alert.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends alertFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, alertFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__alertClient<runtime.Types.Result.GetResult<Prisma.$alertPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Alert that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {alertFindFirstArgs} args - Arguments to find a Alert
   * @example
   * // Get one Alert
   * const alert = await prisma.alert.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends alertFindFirstArgs>(args?: Prisma.SelectSubset<T, alertFindFirstArgs<ExtArgs>>): Prisma.Prisma__alertClient<runtime.Types.Result.GetResult<Prisma.$alertPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Alert that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {alertFindFirstOrThrowArgs} args - Arguments to find a Alert
   * @example
   * // Get one Alert
   * const alert = await prisma.alert.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends alertFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, alertFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__alertClient<runtime.Types.Result.GetResult<Prisma.$alertPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Alerts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {alertFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Alerts
   * const alerts = await prisma.alert.findMany()
   * 
   * // Get first 10 Alerts
   * const alerts = await prisma.alert.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const alertWithIdOnly = await prisma.alert.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends alertFindManyArgs>(args?: Prisma.SelectSubset<T, alertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$alertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Alert.
   * @param {alertCreateArgs} args - Arguments to create a Alert.
   * @example
   * // Create one Alert
   * const Alert = await prisma.alert.create({
   *   data: {
   *     // ... data to create a Alert
   *   }
   * })
   * 
   */
  create<T extends alertCreateArgs>(args: Prisma.SelectSubset<T, alertCreateArgs<ExtArgs>>): Prisma.Prisma__alertClient<runtime.Types.Result.GetResult<Prisma.$alertPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Alerts.
   * @param {alertCreateManyArgs} args - Arguments to create many Alerts.
   * @example
   * // Create many Alerts
   * const alert = await prisma.alert.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends alertCreateManyArgs>(args?: Prisma.SelectSubset<T, alertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Alerts and returns the data saved in the database.
   * @param {alertCreateManyAndReturnArgs} args - Arguments to create many Alerts.
   * @example
   * // Create many Alerts
   * const alert = await prisma.alert.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Alerts and only return the `id`
   * const alertWithIdOnly = await prisma.alert.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends alertCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, alertCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$alertPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Alert.
   * @param {alertDeleteArgs} args - Arguments to delete one Alert.
   * @example
   * // Delete one Alert
   * const Alert = await prisma.alert.delete({
   *   where: {
   *     // ... filter to delete one Alert
   *   }
   * })
   * 
   */
  delete<T extends alertDeleteArgs>(args: Prisma.SelectSubset<T, alertDeleteArgs<ExtArgs>>): Prisma.Prisma__alertClient<runtime.Types.Result.GetResult<Prisma.$alertPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Alert.
   * @param {alertUpdateArgs} args - Arguments to update one Alert.
   * @example
   * // Update one Alert
   * const alert = await prisma.alert.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends alertUpdateArgs>(args: Prisma.SelectSubset<T, alertUpdateArgs<ExtArgs>>): Prisma.Prisma__alertClient<runtime.Types.Result.GetResult<Prisma.$alertPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Alerts.
   * @param {alertDeleteManyArgs} args - Arguments to filter Alerts to delete.
   * @example
   * // Delete a few Alerts
   * const { count } = await prisma.alert.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends alertDeleteManyArgs>(args?: Prisma.SelectSubset<T, alertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Alerts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {alertUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Alerts
   * const alert = await prisma.alert.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends alertUpdateManyArgs>(args: Prisma.SelectSubset<T, alertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Alerts and returns the data updated in the database.
   * @param {alertUpdateManyAndReturnArgs} args - Arguments to update many Alerts.
   * @example
   * // Update many Alerts
   * const alert = await prisma.alert.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Alerts and only return the `id`
   * const alertWithIdOnly = await prisma.alert.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends alertUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, alertUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$alertPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Alert.
   * @param {alertUpsertArgs} args - Arguments to update or create a Alert.
   * @example
   * // Update or create a Alert
   * const alert = await prisma.alert.upsert({
   *   create: {
   *     // ... data to create a Alert
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Alert we want to update
   *   }
   * })
   */
  upsert<T extends alertUpsertArgs>(args: Prisma.SelectSubset<T, alertUpsertArgs<ExtArgs>>): Prisma.Prisma__alertClient<runtime.Types.Result.GetResult<Prisma.$alertPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Alerts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {alertCountArgs} args - Arguments to filter Alerts to count.
   * @example
   * // Count the number of Alerts
   * const count = await prisma.alert.count({
   *   where: {
   *     // ... the filter for the Alerts we want to count
   *   }
   * })
  **/
  count<T extends alertCountArgs>(
    args?: Prisma.Subset<T, alertCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AlertCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Alert.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AlertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AlertAggregateArgs>(args: Prisma.Subset<T, AlertAggregateArgs>): Prisma.PrismaPromise<GetAlertAggregateType<T>>

  /**
   * Group by Alert.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {alertGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends alertGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: alertGroupByArgs['orderBy'] }
      : { orderBy?: alertGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, alertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the alert model
 */
readonly fields: alertFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for alert.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__alertClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the alert model
 */
export interface alertFieldRefs {
  readonly id: Prisma.FieldRef<"alert", 'Int'>
  readonly flow_id: Prisma.FieldRef<"alert", 'Int'>
  readonly timestamp: Prisma.FieldRef<"alert", 'Int'>
  readonly extra_data: Prisma.FieldRef<"alert", 'String'>
}
    

// Custom InputTypes
/**
 * alert findUnique
 */
export type alertFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the alert
   */
  select?: Prisma.alertSelect<ExtArgs> | null
  /**
   * Omit specific fields from the alert
   */
  omit?: Prisma.alertOmit<ExtArgs> | null
  /**
   * Filter, which alert to fetch.
   */
  where: Prisma.alertWhereUniqueInput
}

/**
 * alert findUniqueOrThrow
 */
export type alertFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the alert
   */
  select?: Prisma.alertSelect<ExtArgs> | null
  /**
   * Omit specific fields from the alert
   */
  omit?: Prisma.alertOmit<ExtArgs> | null
  /**
   * Filter, which alert to fetch.
   */
  where: Prisma.alertWhereUniqueInput
}

/**
 * alert findFirst
 */
export type alertFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the alert
   */
  select?: Prisma.alertSelect<ExtArgs> | null
  /**
   * Omit specific fields from the alert
   */
  omit?: Prisma.alertOmit<ExtArgs> | null
  /**
   * Filter, which alert to fetch.
   */
  where?: Prisma.alertWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of alerts to fetch.
   */
  orderBy?: Prisma.alertOrderByWithRelationInput | Prisma.alertOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for alerts.
   */
  cursor?: Prisma.alertWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` alerts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` alerts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of alerts.
   */
  distinct?: Prisma.AlertScalarFieldEnum | Prisma.AlertScalarFieldEnum[]
}

/**
 * alert findFirstOrThrow
 */
export type alertFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the alert
   */
  select?: Prisma.alertSelect<ExtArgs> | null
  /**
   * Omit specific fields from the alert
   */
  omit?: Prisma.alertOmit<ExtArgs> | null
  /**
   * Filter, which alert to fetch.
   */
  where?: Prisma.alertWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of alerts to fetch.
   */
  orderBy?: Prisma.alertOrderByWithRelationInput | Prisma.alertOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for alerts.
   */
  cursor?: Prisma.alertWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` alerts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` alerts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of alerts.
   */
  distinct?: Prisma.AlertScalarFieldEnum | Prisma.AlertScalarFieldEnum[]
}

/**
 * alert findMany
 */
export type alertFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the alert
   */
  select?: Prisma.alertSelect<ExtArgs> | null
  /**
   * Omit specific fields from the alert
   */
  omit?: Prisma.alertOmit<ExtArgs> | null
  /**
   * Filter, which alerts to fetch.
   */
  where?: Prisma.alertWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of alerts to fetch.
   */
  orderBy?: Prisma.alertOrderByWithRelationInput | Prisma.alertOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing alerts.
   */
  cursor?: Prisma.alertWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` alerts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` alerts.
   */
  skip?: number
  distinct?: Prisma.AlertScalarFieldEnum | Prisma.AlertScalarFieldEnum[]
}

/**
 * alert create
 */
export type alertCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the alert
   */
  select?: Prisma.alertSelect<ExtArgs> | null
  /**
   * Omit specific fields from the alert
   */
  omit?: Prisma.alertOmit<ExtArgs> | null
  /**
   * The data needed to create a alert.
   */
  data: Prisma.XOR<Prisma.alertCreateInput, Prisma.alertUncheckedCreateInput>
}

/**
 * alert createMany
 */
export type alertCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many alerts.
   */
  data: Prisma.alertCreateManyInput | Prisma.alertCreateManyInput[]
}

/**
 * alert createManyAndReturn
 */
export type alertCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the alert
   */
  select?: Prisma.alertSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the alert
   */
  omit?: Prisma.alertOmit<ExtArgs> | null
  /**
   * The data used to create many alerts.
   */
  data: Prisma.alertCreateManyInput | Prisma.alertCreateManyInput[]
}

/**
 * alert update
 */
export type alertUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the alert
   */
  select?: Prisma.alertSelect<ExtArgs> | null
  /**
   * Omit specific fields from the alert
   */
  omit?: Prisma.alertOmit<ExtArgs> | null
  /**
   * The data needed to update a alert.
   */
  data: Prisma.XOR<Prisma.alertUpdateInput, Prisma.alertUncheckedUpdateInput>
  /**
   * Choose, which alert to update.
   */
  where: Prisma.alertWhereUniqueInput
}

/**
 * alert updateMany
 */
export type alertUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update alerts.
   */
  data: Prisma.XOR<Prisma.alertUpdateManyMutationInput, Prisma.alertUncheckedUpdateManyInput>
  /**
   * Filter which alerts to update
   */
  where?: Prisma.alertWhereInput
  /**
   * Limit how many alerts to update.
   */
  limit?: number
}

/**
 * alert updateManyAndReturn
 */
export type alertUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the alert
   */
  select?: Prisma.alertSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the alert
   */
  omit?: Prisma.alertOmit<ExtArgs> | null
  /**
   * The data used to update alerts.
   */
  data: Prisma.XOR<Prisma.alertUpdateManyMutationInput, Prisma.alertUncheckedUpdateManyInput>
  /**
   * Filter which alerts to update
   */
  where?: Prisma.alertWhereInput
  /**
   * Limit how many alerts to update.
   */
  limit?: number
}

/**
 * alert upsert
 */
export type alertUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the alert
   */
  select?: Prisma.alertSelect<ExtArgs> | null
  /**
   * Omit specific fields from the alert
   */
  omit?: Prisma.alertOmit<ExtArgs> | null
  /**
   * The filter to search for the alert to update in case it exists.
   */
  where: Prisma.alertWhereUniqueInput
  /**
   * In case the alert found by the `where` argument doesn't exist, create a new alert with this data.
   */
  create: Prisma.XOR<Prisma.alertCreateInput, Prisma.alertUncheckedCreateInput>
  /**
   * In case the alert was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.alertUpdateInput, Prisma.alertUncheckedUpdateInput>
}

/**
 * alert delete
 */
export type alertDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the alert
   */
  select?: Prisma.alertSelect<ExtArgs> | null
  /**
   * Omit specific fields from the alert
   */
  omit?: Prisma.alertOmit<ExtArgs> | null
  /**
   * Filter which alert to delete.
   */
  where: Prisma.alertWhereUniqueInput
}

/**
 * alert deleteMany
 */
export type alertDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which alerts to delete
   */
  where?: Prisma.alertWhereInput
  /**
   * Limit how many alerts to delete.
   */
  limit?: number
}

/**
 * alert without action
 */
export type alertDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the alert
   */
  select?: Prisma.alertSelect<ExtArgs> | null
  /**
   * Omit specific fields from the alert
   */
  omit?: Prisma.alertOmit<ExtArgs> | null
}
