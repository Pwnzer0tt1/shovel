
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `anomaly` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model anomaly
 * 
 */
export type anomalyModel = runtime.Types.Result.DefaultSelection<Prisma.$anomalyPayload>

export type AggregateAnomaly = {
  _count: AnomalyCountAggregateOutputType | null
  _avg: AnomalyAvgAggregateOutputType | null
  _sum: AnomalySumAggregateOutputType | null
  _min: AnomalyMinAggregateOutputType | null
  _max: AnomalyMaxAggregateOutputType | null
}

export type AnomalyAvgAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
}

export type AnomalySumAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
}

export type AnomalyMinAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
  extra_data: string | null
}

export type AnomalyMaxAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
  extra_data: string | null
}

export type AnomalyCountAggregateOutputType = {
  id: number
  flow_id: number
  timestamp: number
  extra_data: number
  _all: number
}


export type AnomalyAvgAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
}

export type AnomalySumAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
}

export type AnomalyMinAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
  extra_data?: true
}

export type AnomalyMaxAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
  extra_data?: true
}

export type AnomalyCountAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
  extra_data?: true
  _all?: true
}

export type AnomalyAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which anomaly to aggregate.
   */
  where?: Prisma.anomalyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of anomalies to fetch.
   */
  orderBy?: Prisma.anomalyOrderByWithRelationInput | Prisma.anomalyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.anomalyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` anomalies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` anomalies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned anomalies
  **/
  _count?: true | AnomalyCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AnomalyAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AnomalySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AnomalyMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AnomalyMaxAggregateInputType
}

export type GetAnomalyAggregateType<T extends AnomalyAggregateArgs> = {
      [P in keyof T & keyof AggregateAnomaly]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAnomaly[P]>
    : Prisma.GetScalarType<T[P], AggregateAnomaly[P]>
}




export type anomalyGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.anomalyWhereInput
  orderBy?: Prisma.anomalyOrderByWithAggregationInput | Prisma.anomalyOrderByWithAggregationInput[]
  by: Prisma.AnomalyScalarFieldEnum[] | Prisma.AnomalyScalarFieldEnum
  having?: Prisma.anomalyScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AnomalyCountAggregateInputType | true
  _avg?: AnomalyAvgAggregateInputType
  _sum?: AnomalySumAggregateInputType
  _min?: AnomalyMinAggregateInputType
  _max?: AnomalyMaxAggregateInputType
}

export type AnomalyGroupByOutputType = {
  id: number
  flow_id: number
  timestamp: number
  extra_data: string | null
  _count: AnomalyCountAggregateOutputType | null
  _avg: AnomalyAvgAggregateOutputType | null
  _sum: AnomalySumAggregateOutputType | null
  _min: AnomalyMinAggregateOutputType | null
  _max: AnomalyMaxAggregateOutputType | null
}

type GetAnomalyGroupByPayload<T extends anomalyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AnomalyGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AnomalyGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AnomalyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AnomalyGroupByOutputType[P]>
      }
    >
  > 



export type anomalyWhereInput = {
  AND?: Prisma.anomalyWhereInput | Prisma.anomalyWhereInput[]
  OR?: Prisma.anomalyWhereInput[]
  NOT?: Prisma.anomalyWhereInput | Prisma.anomalyWhereInput[]
  id?: Prisma.IntFilter<"anomaly"> | number
  flow_id?: Prisma.IntFilter<"anomaly"> | number
  timestamp?: Prisma.IntFilter<"anomaly"> | number
  extra_data?: Prisma.StringNullableFilter<"anomaly"> | string | null
}

export type anomalyOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type anomalyWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  flow_id_timestamp?: Prisma.anomalyFlow_idTimestampCompoundUniqueInput
  AND?: Prisma.anomalyWhereInput | Prisma.anomalyWhereInput[]
  OR?: Prisma.anomalyWhereInput[]
  NOT?: Prisma.anomalyWhereInput | Prisma.anomalyWhereInput[]
  flow_id?: Prisma.IntFilter<"anomaly"> | number
  timestamp?: Prisma.IntFilter<"anomaly"> | number
  extra_data?: Prisma.StringNullableFilter<"anomaly"> | string | null
}, "id" | "flow_id_timestamp">

export type anomalyOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.anomalyCountOrderByAggregateInput
  _avg?: Prisma.anomalyAvgOrderByAggregateInput
  _max?: Prisma.anomalyMaxOrderByAggregateInput
  _min?: Prisma.anomalyMinOrderByAggregateInput
  _sum?: Prisma.anomalySumOrderByAggregateInput
}

export type anomalyScalarWhereWithAggregatesInput = {
  AND?: Prisma.anomalyScalarWhereWithAggregatesInput | Prisma.anomalyScalarWhereWithAggregatesInput[]
  OR?: Prisma.anomalyScalarWhereWithAggregatesInput[]
  NOT?: Prisma.anomalyScalarWhereWithAggregatesInput | Prisma.anomalyScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"anomaly"> | number
  flow_id?: Prisma.IntWithAggregatesFilter<"anomaly"> | number
  timestamp?: Prisma.IntWithAggregatesFilter<"anomaly"> | number
  extra_data?: Prisma.StringNullableWithAggregatesFilter<"anomaly"> | string | null
}

export type anomalyCreateInput = {
  flow_id: number
  timestamp: number
  extra_data?: string | null
}

export type anomalyUncheckedCreateInput = {
  id?: number
  flow_id: number
  timestamp: number
  extra_data?: string | null
}

export type anomalyUpdateInput = {
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type anomalyUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type anomalyCreateManyInput = {
  id?: number
  flow_id: number
  timestamp: number
  extra_data?: string | null
}

export type anomalyUpdateManyMutationInput = {
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type anomalyUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type anomalyFlow_idTimestampCompoundUniqueInput = {
  flow_id: number
  timestamp: number
}

export type anomalyCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type anomalyAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type anomalyMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type anomalyMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type anomalySumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}



export type anomalySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["anomaly"]>

export type anomalySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["anomaly"]>

export type anomalySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["anomaly"]>

export type anomalySelectScalar = {
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  extra_data?: boolean
}

export type anomalyOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "flow_id" | "timestamp" | "extra_data", ExtArgs["result"]["anomaly"]>

export type $anomalyPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "anomaly"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    flow_id: number
    timestamp: number
    extra_data: string | null
  }, ExtArgs["result"]["anomaly"]>
  composites: {}
}

export type anomalyGetPayload<S extends boolean | null | undefined | anomalyDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$anomalyPayload, S>

export type anomalyCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<anomalyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AnomalyCountAggregateInputType | true
  }

export interface anomalyDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['anomaly'], meta: { name: 'anomaly' } }
  /**
   * Find zero or one Anomaly that matches the filter.
   * @param {anomalyFindUniqueArgs} args - Arguments to find a Anomaly
   * @example
   * // Get one Anomaly
   * const anomaly = await prisma.anomaly.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends anomalyFindUniqueArgs>(args: Prisma.SelectSubset<T, anomalyFindUniqueArgs<ExtArgs>>): Prisma.Prisma__anomalyClient<runtime.Types.Result.GetResult<Prisma.$anomalyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Anomaly that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {anomalyFindUniqueOrThrowArgs} args - Arguments to find a Anomaly
   * @example
   * // Get one Anomaly
   * const anomaly = await prisma.anomaly.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends anomalyFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, anomalyFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__anomalyClient<runtime.Types.Result.GetResult<Prisma.$anomalyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Anomaly that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {anomalyFindFirstArgs} args - Arguments to find a Anomaly
   * @example
   * // Get one Anomaly
   * const anomaly = await prisma.anomaly.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends anomalyFindFirstArgs>(args?: Prisma.SelectSubset<T, anomalyFindFirstArgs<ExtArgs>>): Prisma.Prisma__anomalyClient<runtime.Types.Result.GetResult<Prisma.$anomalyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Anomaly that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {anomalyFindFirstOrThrowArgs} args - Arguments to find a Anomaly
   * @example
   * // Get one Anomaly
   * const anomaly = await prisma.anomaly.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends anomalyFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, anomalyFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__anomalyClient<runtime.Types.Result.GetResult<Prisma.$anomalyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Anomalies that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {anomalyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Anomalies
   * const anomalies = await prisma.anomaly.findMany()
   * 
   * // Get first 10 Anomalies
   * const anomalies = await prisma.anomaly.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const anomalyWithIdOnly = await prisma.anomaly.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends anomalyFindManyArgs>(args?: Prisma.SelectSubset<T, anomalyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$anomalyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Anomaly.
   * @param {anomalyCreateArgs} args - Arguments to create a Anomaly.
   * @example
   * // Create one Anomaly
   * const Anomaly = await prisma.anomaly.create({
   *   data: {
   *     // ... data to create a Anomaly
   *   }
   * })
   * 
   */
  create<T extends anomalyCreateArgs>(args: Prisma.SelectSubset<T, anomalyCreateArgs<ExtArgs>>): Prisma.Prisma__anomalyClient<runtime.Types.Result.GetResult<Prisma.$anomalyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Anomalies.
   * @param {anomalyCreateManyArgs} args - Arguments to create many Anomalies.
   * @example
   * // Create many Anomalies
   * const anomaly = await prisma.anomaly.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends anomalyCreateManyArgs>(args?: Prisma.SelectSubset<T, anomalyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Anomalies and returns the data saved in the database.
   * @param {anomalyCreateManyAndReturnArgs} args - Arguments to create many Anomalies.
   * @example
   * // Create many Anomalies
   * const anomaly = await prisma.anomaly.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Anomalies and only return the `id`
   * const anomalyWithIdOnly = await prisma.anomaly.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends anomalyCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, anomalyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$anomalyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Anomaly.
   * @param {anomalyDeleteArgs} args - Arguments to delete one Anomaly.
   * @example
   * // Delete one Anomaly
   * const Anomaly = await prisma.anomaly.delete({
   *   where: {
   *     // ... filter to delete one Anomaly
   *   }
   * })
   * 
   */
  delete<T extends anomalyDeleteArgs>(args: Prisma.SelectSubset<T, anomalyDeleteArgs<ExtArgs>>): Prisma.Prisma__anomalyClient<runtime.Types.Result.GetResult<Prisma.$anomalyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Anomaly.
   * @param {anomalyUpdateArgs} args - Arguments to update one Anomaly.
   * @example
   * // Update one Anomaly
   * const anomaly = await prisma.anomaly.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends anomalyUpdateArgs>(args: Prisma.SelectSubset<T, anomalyUpdateArgs<ExtArgs>>): Prisma.Prisma__anomalyClient<runtime.Types.Result.GetResult<Prisma.$anomalyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Anomalies.
   * @param {anomalyDeleteManyArgs} args - Arguments to filter Anomalies to delete.
   * @example
   * // Delete a few Anomalies
   * const { count } = await prisma.anomaly.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends anomalyDeleteManyArgs>(args?: Prisma.SelectSubset<T, anomalyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Anomalies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {anomalyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Anomalies
   * const anomaly = await prisma.anomaly.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends anomalyUpdateManyArgs>(args: Prisma.SelectSubset<T, anomalyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Anomalies and returns the data updated in the database.
   * @param {anomalyUpdateManyAndReturnArgs} args - Arguments to update many Anomalies.
   * @example
   * // Update many Anomalies
   * const anomaly = await prisma.anomaly.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Anomalies and only return the `id`
   * const anomalyWithIdOnly = await prisma.anomaly.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends anomalyUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, anomalyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$anomalyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Anomaly.
   * @param {anomalyUpsertArgs} args - Arguments to update or create a Anomaly.
   * @example
   * // Update or create a Anomaly
   * const anomaly = await prisma.anomaly.upsert({
   *   create: {
   *     // ... data to create a Anomaly
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Anomaly we want to update
   *   }
   * })
   */
  upsert<T extends anomalyUpsertArgs>(args: Prisma.SelectSubset<T, anomalyUpsertArgs<ExtArgs>>): Prisma.Prisma__anomalyClient<runtime.Types.Result.GetResult<Prisma.$anomalyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Anomalies.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {anomalyCountArgs} args - Arguments to filter Anomalies to count.
   * @example
   * // Count the number of Anomalies
   * const count = await prisma.anomaly.count({
   *   where: {
   *     // ... the filter for the Anomalies we want to count
   *   }
   * })
  **/
  count<T extends anomalyCountArgs>(
    args?: Prisma.Subset<T, anomalyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AnomalyCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Anomaly.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnomalyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AnomalyAggregateArgs>(args: Prisma.Subset<T, AnomalyAggregateArgs>): Prisma.PrismaPromise<GetAnomalyAggregateType<T>>

  /**
   * Group by Anomaly.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {anomalyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends anomalyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: anomalyGroupByArgs['orderBy'] }
      : { orderBy?: anomalyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, anomalyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnomalyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the anomaly model
 */
readonly fields: anomalyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for anomaly.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__anomalyClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the anomaly model
 */
export interface anomalyFieldRefs {
  readonly id: Prisma.FieldRef<"anomaly", 'Int'>
  readonly flow_id: Prisma.FieldRef<"anomaly", 'Int'>
  readonly timestamp: Prisma.FieldRef<"anomaly", 'Int'>
  readonly extra_data: Prisma.FieldRef<"anomaly", 'String'>
}
    

// Custom InputTypes
/**
 * anomaly findUnique
 */
export type anomalyFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the anomaly
   */
  select?: Prisma.anomalySelect<ExtArgs> | null
  /**
   * Omit specific fields from the anomaly
   */
  omit?: Prisma.anomalyOmit<ExtArgs> | null
  /**
   * Filter, which anomaly to fetch.
   */
  where: Prisma.anomalyWhereUniqueInput
}

/**
 * anomaly findUniqueOrThrow
 */
export type anomalyFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the anomaly
   */
  select?: Prisma.anomalySelect<ExtArgs> | null
  /**
   * Omit specific fields from the anomaly
   */
  omit?: Prisma.anomalyOmit<ExtArgs> | null
  /**
   * Filter, which anomaly to fetch.
   */
  where: Prisma.anomalyWhereUniqueInput
}

/**
 * anomaly findFirst
 */
export type anomalyFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the anomaly
   */
  select?: Prisma.anomalySelect<ExtArgs> | null
  /**
   * Omit specific fields from the anomaly
   */
  omit?: Prisma.anomalyOmit<ExtArgs> | null
  /**
   * Filter, which anomaly to fetch.
   */
  where?: Prisma.anomalyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of anomalies to fetch.
   */
  orderBy?: Prisma.anomalyOrderByWithRelationInput | Prisma.anomalyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for anomalies.
   */
  cursor?: Prisma.anomalyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` anomalies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` anomalies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of anomalies.
   */
  distinct?: Prisma.AnomalyScalarFieldEnum | Prisma.AnomalyScalarFieldEnum[]
}

/**
 * anomaly findFirstOrThrow
 */
export type anomalyFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the anomaly
   */
  select?: Prisma.anomalySelect<ExtArgs> | null
  /**
   * Omit specific fields from the anomaly
   */
  omit?: Prisma.anomalyOmit<ExtArgs> | null
  /**
   * Filter, which anomaly to fetch.
   */
  where?: Prisma.anomalyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of anomalies to fetch.
   */
  orderBy?: Prisma.anomalyOrderByWithRelationInput | Prisma.anomalyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for anomalies.
   */
  cursor?: Prisma.anomalyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` anomalies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` anomalies.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of anomalies.
   */
  distinct?: Prisma.AnomalyScalarFieldEnum | Prisma.AnomalyScalarFieldEnum[]
}

/**
 * anomaly findMany
 */
export type anomalyFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the anomaly
   */
  select?: Prisma.anomalySelect<ExtArgs> | null
  /**
   * Omit specific fields from the anomaly
   */
  omit?: Prisma.anomalyOmit<ExtArgs> | null
  /**
   * Filter, which anomalies to fetch.
   */
  where?: Prisma.anomalyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of anomalies to fetch.
   */
  orderBy?: Prisma.anomalyOrderByWithRelationInput | Prisma.anomalyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing anomalies.
   */
  cursor?: Prisma.anomalyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` anomalies from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` anomalies.
   */
  skip?: number
  distinct?: Prisma.AnomalyScalarFieldEnum | Prisma.AnomalyScalarFieldEnum[]
}

/**
 * anomaly create
 */
export type anomalyCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the anomaly
   */
  select?: Prisma.anomalySelect<ExtArgs> | null
  /**
   * Omit specific fields from the anomaly
   */
  omit?: Prisma.anomalyOmit<ExtArgs> | null
  /**
   * The data needed to create a anomaly.
   */
  data: Prisma.XOR<Prisma.anomalyCreateInput, Prisma.anomalyUncheckedCreateInput>
}

/**
 * anomaly createMany
 */
export type anomalyCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many anomalies.
   */
  data: Prisma.anomalyCreateManyInput | Prisma.anomalyCreateManyInput[]
}

/**
 * anomaly createManyAndReturn
 */
export type anomalyCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the anomaly
   */
  select?: Prisma.anomalySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the anomaly
   */
  omit?: Prisma.anomalyOmit<ExtArgs> | null
  /**
   * The data used to create many anomalies.
   */
  data: Prisma.anomalyCreateManyInput | Prisma.anomalyCreateManyInput[]
}

/**
 * anomaly update
 */
export type anomalyUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the anomaly
   */
  select?: Prisma.anomalySelect<ExtArgs> | null
  /**
   * Omit specific fields from the anomaly
   */
  omit?: Prisma.anomalyOmit<ExtArgs> | null
  /**
   * The data needed to update a anomaly.
   */
  data: Prisma.XOR<Prisma.anomalyUpdateInput, Prisma.anomalyUncheckedUpdateInput>
  /**
   * Choose, which anomaly to update.
   */
  where: Prisma.anomalyWhereUniqueInput
}

/**
 * anomaly updateMany
 */
export type anomalyUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update anomalies.
   */
  data: Prisma.XOR<Prisma.anomalyUpdateManyMutationInput, Prisma.anomalyUncheckedUpdateManyInput>
  /**
   * Filter which anomalies to update
   */
  where?: Prisma.anomalyWhereInput
  /**
   * Limit how many anomalies to update.
   */
  limit?: number
}

/**
 * anomaly updateManyAndReturn
 */
export type anomalyUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the anomaly
   */
  select?: Prisma.anomalySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the anomaly
   */
  omit?: Prisma.anomalyOmit<ExtArgs> | null
  /**
   * The data used to update anomalies.
   */
  data: Prisma.XOR<Prisma.anomalyUpdateManyMutationInput, Prisma.anomalyUncheckedUpdateManyInput>
  /**
   * Filter which anomalies to update
   */
  where?: Prisma.anomalyWhereInput
  /**
   * Limit how many anomalies to update.
   */
  limit?: number
}

/**
 * anomaly upsert
 */
export type anomalyUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the anomaly
   */
  select?: Prisma.anomalySelect<ExtArgs> | null
  /**
   * Omit specific fields from the anomaly
   */
  omit?: Prisma.anomalyOmit<ExtArgs> | null
  /**
   * The filter to search for the anomaly to update in case it exists.
   */
  where: Prisma.anomalyWhereUniqueInput
  /**
   * In case the anomaly found by the `where` argument doesn't exist, create a new anomaly with this data.
   */
  create: Prisma.XOR<Prisma.anomalyCreateInput, Prisma.anomalyUncheckedCreateInput>
  /**
   * In case the anomaly was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.anomalyUpdateInput, Prisma.anomalyUncheckedUpdateInput>
}

/**
 * anomaly delete
 */
export type anomalyDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the anomaly
   */
  select?: Prisma.anomalySelect<ExtArgs> | null
  /**
   * Omit specific fields from the anomaly
   */
  omit?: Prisma.anomalyOmit<ExtArgs> | null
  /**
   * Filter which anomaly to delete.
   */
  where: Prisma.anomalyWhereUniqueInput
}

/**
 * anomaly deleteMany
 */
export type anomalyDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which anomalies to delete
   */
  where?: Prisma.anomalyWhereInput
  /**
   * Limit how many anomalies to delete.
   */
  limit?: number
}

/**
 * anomaly without action
 */
export type anomalyDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the anomaly
   */
  select?: Prisma.anomalySelect<ExtArgs> | null
  /**
   * Omit specific fields from the anomaly
   */
  omit?: Prisma.anomalyOmit<ExtArgs> | null
}
