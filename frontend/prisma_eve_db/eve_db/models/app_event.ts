
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `app_event` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model app_event
 * 
 */
export type app_eventModel = runtime.Types.Result.DefaultSelection<Prisma.$app_eventPayload>

export type AggregateApp_event = {
  _count: App_eventCountAggregateOutputType | null
  _avg: App_eventAvgAggregateOutputType | null
  _sum: App_eventSumAggregateOutputType | null
  _min: App_eventMinAggregateOutputType | null
  _max: App_eventMaxAggregateOutputType | null
}

export type App_eventAvgAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
}

export type App_eventSumAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
}

export type App_eventMinAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
  app_proto: string | null
  extra_data: string | null
}

export type App_eventMaxAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
  app_proto: string | null
  extra_data: string | null
}

export type App_eventCountAggregateOutputType = {
  id: number
  flow_id: number
  timestamp: number
  app_proto: number
  extra_data: number
  _all: number
}


export type App_eventAvgAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
}

export type App_eventSumAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
}

export type App_eventMinAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
  app_proto?: true
  extra_data?: true
}

export type App_eventMaxAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
  app_proto?: true
  extra_data?: true
}

export type App_eventCountAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
  app_proto?: true
  extra_data?: true
  _all?: true
}

export type App_eventAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which app_event to aggregate.
   */
  where?: Prisma.app_eventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of app_events to fetch.
   */
  orderBy?: Prisma.app_eventOrderByWithRelationInput | Prisma.app_eventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.app_eventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` app_events from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` app_events.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned app_events
  **/
  _count?: true | App_eventCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: App_eventAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: App_eventSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: App_eventMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: App_eventMaxAggregateInputType
}

export type GetApp_eventAggregateType<T extends App_eventAggregateArgs> = {
      [P in keyof T & keyof AggregateApp_event]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateApp_event[P]>
    : Prisma.GetScalarType<T[P], AggregateApp_event[P]>
}




export type app_eventGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.app_eventWhereInput
  orderBy?: Prisma.app_eventOrderByWithAggregationInput | Prisma.app_eventOrderByWithAggregationInput[]
  by: Prisma.App_eventScalarFieldEnum[] | Prisma.App_eventScalarFieldEnum
  having?: Prisma.app_eventScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: App_eventCountAggregateInputType | true
  _avg?: App_eventAvgAggregateInputType
  _sum?: App_eventSumAggregateInputType
  _min?: App_eventMinAggregateInputType
  _max?: App_eventMaxAggregateInputType
}

export type App_eventGroupByOutputType = {
  id: number
  flow_id: number
  timestamp: number
  app_proto: string
  extra_data: string | null
  _count: App_eventCountAggregateOutputType | null
  _avg: App_eventAvgAggregateOutputType | null
  _sum: App_eventSumAggregateOutputType | null
  _min: App_eventMinAggregateOutputType | null
  _max: App_eventMaxAggregateOutputType | null
}

type GetApp_eventGroupByPayload<T extends app_eventGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<App_eventGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof App_eventGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], App_eventGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], App_eventGroupByOutputType[P]>
      }
    >
  > 



export type app_eventWhereInput = {
  AND?: Prisma.app_eventWhereInput | Prisma.app_eventWhereInput[]
  OR?: Prisma.app_eventWhereInput[]
  NOT?: Prisma.app_eventWhereInput | Prisma.app_eventWhereInput[]
  id?: Prisma.IntFilter<"app_event"> | number
  flow_id?: Prisma.IntFilter<"app_event"> | number
  timestamp?: Prisma.IntFilter<"app_event"> | number
  app_proto?: Prisma.StringFilter<"app_event"> | string
  extra_data?: Prisma.StringNullableFilter<"app_event"> | string | null
}

export type app_eventOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  app_proto?: Prisma.SortOrder
  extra_data?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type app_eventWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  flow_id_app_proto_timestamp?: Prisma.app_eventFlow_idApp_protoTimestampCompoundUniqueInput
  AND?: Prisma.app_eventWhereInput | Prisma.app_eventWhereInput[]
  OR?: Prisma.app_eventWhereInput[]
  NOT?: Prisma.app_eventWhereInput | Prisma.app_eventWhereInput[]
  flow_id?: Prisma.IntFilter<"app_event"> | number
  timestamp?: Prisma.IntFilter<"app_event"> | number
  app_proto?: Prisma.StringFilter<"app_event"> | string
  extra_data?: Prisma.StringNullableFilter<"app_event"> | string | null
}, "id" | "flow_id_app_proto_timestamp">

export type app_eventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  app_proto?: Prisma.SortOrder
  extra_data?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.app_eventCountOrderByAggregateInput
  _avg?: Prisma.app_eventAvgOrderByAggregateInput
  _max?: Prisma.app_eventMaxOrderByAggregateInput
  _min?: Prisma.app_eventMinOrderByAggregateInput
  _sum?: Prisma.app_eventSumOrderByAggregateInput
}

export type app_eventScalarWhereWithAggregatesInput = {
  AND?: Prisma.app_eventScalarWhereWithAggregatesInput | Prisma.app_eventScalarWhereWithAggregatesInput[]
  OR?: Prisma.app_eventScalarWhereWithAggregatesInput[]
  NOT?: Prisma.app_eventScalarWhereWithAggregatesInput | Prisma.app_eventScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"app_event"> | number
  flow_id?: Prisma.IntWithAggregatesFilter<"app_event"> | number
  timestamp?: Prisma.IntWithAggregatesFilter<"app_event"> | number
  app_proto?: Prisma.StringWithAggregatesFilter<"app_event"> | string
  extra_data?: Prisma.StringNullableWithAggregatesFilter<"app_event"> | string | null
}

export type app_eventCreateInput = {
  flow_id: number
  timestamp: number
  app_proto: string
  extra_data?: string | null
}

export type app_eventUncheckedCreateInput = {
  id?: number
  flow_id: number
  timestamp: number
  app_proto: string
  extra_data?: string | null
}

export type app_eventUpdateInput = {
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  app_proto?: Prisma.StringFieldUpdateOperationsInput | string
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type app_eventUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  app_proto?: Prisma.StringFieldUpdateOperationsInput | string
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type app_eventCreateManyInput = {
  id?: number
  flow_id: number
  timestamp: number
  app_proto: string
  extra_data?: string | null
}

export type app_eventUpdateManyMutationInput = {
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  app_proto?: Prisma.StringFieldUpdateOperationsInput | string
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type app_eventUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  app_proto?: Prisma.StringFieldUpdateOperationsInput | string
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type app_eventFlow_idApp_protoTimestampCompoundUniqueInput = {
  flow_id: number
  app_proto: string
  timestamp: number
}

export type app_eventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  app_proto?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type app_eventAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type app_eventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  app_proto?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type app_eventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  app_proto?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type app_eventSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}



export type app_eventSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  app_proto?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["app_event"]>

export type app_eventSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  app_proto?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["app_event"]>

export type app_eventSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  app_proto?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["app_event"]>

export type app_eventSelectScalar = {
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  app_proto?: boolean
  extra_data?: boolean
}

export type app_eventOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "flow_id" | "timestamp" | "app_proto" | "extra_data", ExtArgs["result"]["app_event"]>

export type $app_eventPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "app_event"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    flow_id: number
    timestamp: number
    app_proto: string
    extra_data: string | null
  }, ExtArgs["result"]["app_event"]>
  composites: {}
}

export type app_eventGetPayload<S extends boolean | null | undefined | app_eventDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$app_eventPayload, S>

export type app_eventCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<app_eventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: App_eventCountAggregateInputType | true
  }

export interface app_eventDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['app_event'], meta: { name: 'app_event' } }
  /**
   * Find zero or one App_event that matches the filter.
   * @param {app_eventFindUniqueArgs} args - Arguments to find a App_event
   * @example
   * // Get one App_event
   * const app_event = await prisma.app_event.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends app_eventFindUniqueArgs>(args: Prisma.SelectSubset<T, app_eventFindUniqueArgs<ExtArgs>>): Prisma.Prisma__app_eventClient<runtime.Types.Result.GetResult<Prisma.$app_eventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one App_event that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {app_eventFindUniqueOrThrowArgs} args - Arguments to find a App_event
   * @example
   * // Get one App_event
   * const app_event = await prisma.app_event.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends app_eventFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, app_eventFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__app_eventClient<runtime.Types.Result.GetResult<Prisma.$app_eventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first App_event that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {app_eventFindFirstArgs} args - Arguments to find a App_event
   * @example
   * // Get one App_event
   * const app_event = await prisma.app_event.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends app_eventFindFirstArgs>(args?: Prisma.SelectSubset<T, app_eventFindFirstArgs<ExtArgs>>): Prisma.Prisma__app_eventClient<runtime.Types.Result.GetResult<Prisma.$app_eventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first App_event that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {app_eventFindFirstOrThrowArgs} args - Arguments to find a App_event
   * @example
   * // Get one App_event
   * const app_event = await prisma.app_event.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends app_eventFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, app_eventFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__app_eventClient<runtime.Types.Result.GetResult<Prisma.$app_eventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more App_events that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {app_eventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all App_events
   * const app_events = await prisma.app_event.findMany()
   * 
   * // Get first 10 App_events
   * const app_events = await prisma.app_event.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const app_eventWithIdOnly = await prisma.app_event.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends app_eventFindManyArgs>(args?: Prisma.SelectSubset<T, app_eventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$app_eventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a App_event.
   * @param {app_eventCreateArgs} args - Arguments to create a App_event.
   * @example
   * // Create one App_event
   * const App_event = await prisma.app_event.create({
   *   data: {
   *     // ... data to create a App_event
   *   }
   * })
   * 
   */
  create<T extends app_eventCreateArgs>(args: Prisma.SelectSubset<T, app_eventCreateArgs<ExtArgs>>): Prisma.Prisma__app_eventClient<runtime.Types.Result.GetResult<Prisma.$app_eventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many App_events.
   * @param {app_eventCreateManyArgs} args - Arguments to create many App_events.
   * @example
   * // Create many App_events
   * const app_event = await prisma.app_event.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends app_eventCreateManyArgs>(args?: Prisma.SelectSubset<T, app_eventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many App_events and returns the data saved in the database.
   * @param {app_eventCreateManyAndReturnArgs} args - Arguments to create many App_events.
   * @example
   * // Create many App_events
   * const app_event = await prisma.app_event.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many App_events and only return the `id`
   * const app_eventWithIdOnly = await prisma.app_event.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends app_eventCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, app_eventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$app_eventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a App_event.
   * @param {app_eventDeleteArgs} args - Arguments to delete one App_event.
   * @example
   * // Delete one App_event
   * const App_event = await prisma.app_event.delete({
   *   where: {
   *     // ... filter to delete one App_event
   *   }
   * })
   * 
   */
  delete<T extends app_eventDeleteArgs>(args: Prisma.SelectSubset<T, app_eventDeleteArgs<ExtArgs>>): Prisma.Prisma__app_eventClient<runtime.Types.Result.GetResult<Prisma.$app_eventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one App_event.
   * @param {app_eventUpdateArgs} args - Arguments to update one App_event.
   * @example
   * // Update one App_event
   * const app_event = await prisma.app_event.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends app_eventUpdateArgs>(args: Prisma.SelectSubset<T, app_eventUpdateArgs<ExtArgs>>): Prisma.Prisma__app_eventClient<runtime.Types.Result.GetResult<Prisma.$app_eventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more App_events.
   * @param {app_eventDeleteManyArgs} args - Arguments to filter App_events to delete.
   * @example
   * // Delete a few App_events
   * const { count } = await prisma.app_event.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends app_eventDeleteManyArgs>(args?: Prisma.SelectSubset<T, app_eventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more App_events.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {app_eventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many App_events
   * const app_event = await prisma.app_event.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends app_eventUpdateManyArgs>(args: Prisma.SelectSubset<T, app_eventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more App_events and returns the data updated in the database.
   * @param {app_eventUpdateManyAndReturnArgs} args - Arguments to update many App_events.
   * @example
   * // Update many App_events
   * const app_event = await prisma.app_event.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more App_events and only return the `id`
   * const app_eventWithIdOnly = await prisma.app_event.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends app_eventUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, app_eventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$app_eventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one App_event.
   * @param {app_eventUpsertArgs} args - Arguments to update or create a App_event.
   * @example
   * // Update or create a App_event
   * const app_event = await prisma.app_event.upsert({
   *   create: {
   *     // ... data to create a App_event
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the App_event we want to update
   *   }
   * })
   */
  upsert<T extends app_eventUpsertArgs>(args: Prisma.SelectSubset<T, app_eventUpsertArgs<ExtArgs>>): Prisma.Prisma__app_eventClient<runtime.Types.Result.GetResult<Prisma.$app_eventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of App_events.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {app_eventCountArgs} args - Arguments to filter App_events to count.
   * @example
   * // Count the number of App_events
   * const count = await prisma.app_event.count({
   *   where: {
   *     // ... the filter for the App_events we want to count
   *   }
   * })
  **/
  count<T extends app_eventCountArgs>(
    args?: Prisma.Subset<T, app_eventCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], App_eventCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a App_event.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {App_eventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends App_eventAggregateArgs>(args: Prisma.Subset<T, App_eventAggregateArgs>): Prisma.PrismaPromise<GetApp_eventAggregateType<T>>

  /**
   * Group by App_event.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {app_eventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends app_eventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: app_eventGroupByArgs['orderBy'] }
      : { orderBy?: app_eventGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, app_eventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApp_eventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the app_event model
 */
readonly fields: app_eventFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for app_event.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__app_eventClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the app_event model
 */
export interface app_eventFieldRefs {
  readonly id: Prisma.FieldRef<"app_event", 'Int'>
  readonly flow_id: Prisma.FieldRef<"app_event", 'Int'>
  readonly timestamp: Prisma.FieldRef<"app_event", 'Int'>
  readonly app_proto: Prisma.FieldRef<"app_event", 'String'>
  readonly extra_data: Prisma.FieldRef<"app_event", 'String'>
}
    

// Custom InputTypes
/**
 * app_event findUnique
 */
export type app_eventFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the app_event
   */
  select?: Prisma.app_eventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the app_event
   */
  omit?: Prisma.app_eventOmit<ExtArgs> | null
  /**
   * Filter, which app_event to fetch.
   */
  where: Prisma.app_eventWhereUniqueInput
}

/**
 * app_event findUniqueOrThrow
 */
export type app_eventFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the app_event
   */
  select?: Prisma.app_eventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the app_event
   */
  omit?: Prisma.app_eventOmit<ExtArgs> | null
  /**
   * Filter, which app_event to fetch.
   */
  where: Prisma.app_eventWhereUniqueInput
}

/**
 * app_event findFirst
 */
export type app_eventFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the app_event
   */
  select?: Prisma.app_eventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the app_event
   */
  omit?: Prisma.app_eventOmit<ExtArgs> | null
  /**
   * Filter, which app_event to fetch.
   */
  where?: Prisma.app_eventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of app_events to fetch.
   */
  orderBy?: Prisma.app_eventOrderByWithRelationInput | Prisma.app_eventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for app_events.
   */
  cursor?: Prisma.app_eventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` app_events from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` app_events.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of app_events.
   */
  distinct?: Prisma.App_eventScalarFieldEnum | Prisma.App_eventScalarFieldEnum[]
}

/**
 * app_event findFirstOrThrow
 */
export type app_eventFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the app_event
   */
  select?: Prisma.app_eventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the app_event
   */
  omit?: Prisma.app_eventOmit<ExtArgs> | null
  /**
   * Filter, which app_event to fetch.
   */
  where?: Prisma.app_eventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of app_events to fetch.
   */
  orderBy?: Prisma.app_eventOrderByWithRelationInput | Prisma.app_eventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for app_events.
   */
  cursor?: Prisma.app_eventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` app_events from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` app_events.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of app_events.
   */
  distinct?: Prisma.App_eventScalarFieldEnum | Prisma.App_eventScalarFieldEnum[]
}

/**
 * app_event findMany
 */
export type app_eventFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the app_event
   */
  select?: Prisma.app_eventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the app_event
   */
  omit?: Prisma.app_eventOmit<ExtArgs> | null
  /**
   * Filter, which app_events to fetch.
   */
  where?: Prisma.app_eventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of app_events to fetch.
   */
  orderBy?: Prisma.app_eventOrderByWithRelationInput | Prisma.app_eventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing app_events.
   */
  cursor?: Prisma.app_eventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` app_events from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` app_events.
   */
  skip?: number
  distinct?: Prisma.App_eventScalarFieldEnum | Prisma.App_eventScalarFieldEnum[]
}

/**
 * app_event create
 */
export type app_eventCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the app_event
   */
  select?: Prisma.app_eventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the app_event
   */
  omit?: Prisma.app_eventOmit<ExtArgs> | null
  /**
   * The data needed to create a app_event.
   */
  data: Prisma.XOR<Prisma.app_eventCreateInput, Prisma.app_eventUncheckedCreateInput>
}

/**
 * app_event createMany
 */
export type app_eventCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many app_events.
   */
  data: Prisma.app_eventCreateManyInput | Prisma.app_eventCreateManyInput[]
}

/**
 * app_event createManyAndReturn
 */
export type app_eventCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the app_event
   */
  select?: Prisma.app_eventSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the app_event
   */
  omit?: Prisma.app_eventOmit<ExtArgs> | null
  /**
   * The data used to create many app_events.
   */
  data: Prisma.app_eventCreateManyInput | Prisma.app_eventCreateManyInput[]
}

/**
 * app_event update
 */
export type app_eventUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the app_event
   */
  select?: Prisma.app_eventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the app_event
   */
  omit?: Prisma.app_eventOmit<ExtArgs> | null
  /**
   * The data needed to update a app_event.
   */
  data: Prisma.XOR<Prisma.app_eventUpdateInput, Prisma.app_eventUncheckedUpdateInput>
  /**
   * Choose, which app_event to update.
   */
  where: Prisma.app_eventWhereUniqueInput
}

/**
 * app_event updateMany
 */
export type app_eventUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update app_events.
   */
  data: Prisma.XOR<Prisma.app_eventUpdateManyMutationInput, Prisma.app_eventUncheckedUpdateManyInput>
  /**
   * Filter which app_events to update
   */
  where?: Prisma.app_eventWhereInput
  /**
   * Limit how many app_events to update.
   */
  limit?: number
}

/**
 * app_event updateManyAndReturn
 */
export type app_eventUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the app_event
   */
  select?: Prisma.app_eventSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the app_event
   */
  omit?: Prisma.app_eventOmit<ExtArgs> | null
  /**
   * The data used to update app_events.
   */
  data: Prisma.XOR<Prisma.app_eventUpdateManyMutationInput, Prisma.app_eventUncheckedUpdateManyInput>
  /**
   * Filter which app_events to update
   */
  where?: Prisma.app_eventWhereInput
  /**
   * Limit how many app_events to update.
   */
  limit?: number
}

/**
 * app_event upsert
 */
export type app_eventUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the app_event
   */
  select?: Prisma.app_eventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the app_event
   */
  omit?: Prisma.app_eventOmit<ExtArgs> | null
  /**
   * The filter to search for the app_event to update in case it exists.
   */
  where: Prisma.app_eventWhereUniqueInput
  /**
   * In case the app_event found by the `where` argument doesn't exist, create a new app_event with this data.
   */
  create: Prisma.XOR<Prisma.app_eventCreateInput, Prisma.app_eventUncheckedCreateInput>
  /**
   * In case the app_event was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.app_eventUpdateInput, Prisma.app_eventUncheckedUpdateInput>
}

/**
 * app_event delete
 */
export type app_eventDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the app_event
   */
  select?: Prisma.app_eventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the app_event
   */
  omit?: Prisma.app_eventOmit<ExtArgs> | null
  /**
   * Filter which app_event to delete.
   */
  where: Prisma.app_eventWhereUniqueInput
}

/**
 * app_event deleteMany
 */
export type app_eventDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which app_events to delete
   */
  where?: Prisma.app_eventWhereInput
  /**
   * Limit how many app_events to delete.
   */
  limit?: number
}

/**
 * app_event without action
 */
export type app_eventDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the app_event
   */
  select?: Prisma.app_eventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the app_event
   */
  omit?: Prisma.app_eventOmit<ExtArgs> | null
}
