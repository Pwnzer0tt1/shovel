
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `fileinfo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model fileinfo
 * 
 */
export type fileinfoModel = runtime.Types.Result.DefaultSelection<Prisma.$fileinfoPayload>

export type AggregateFileinfo = {
  _count: FileinfoCountAggregateOutputType | null
  _avg: FileinfoAvgAggregateOutputType | null
  _sum: FileinfoSumAggregateOutputType | null
  _min: FileinfoMinAggregateOutputType | null
  _max: FileinfoMaxAggregateOutputType | null
}

export type FileinfoAvgAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
}

export type FileinfoSumAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
}

export type FileinfoMinAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
  extra_data: string | null
}

export type FileinfoMaxAggregateOutputType = {
  id: number | null
  flow_id: number | null
  timestamp: number | null
  extra_data: string | null
}

export type FileinfoCountAggregateOutputType = {
  id: number
  flow_id: number
  timestamp: number
  extra_data: number
  _all: number
}


export type FileinfoAvgAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
}

export type FileinfoSumAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
}

export type FileinfoMinAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
  extra_data?: true
}

export type FileinfoMaxAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
  extra_data?: true
}

export type FileinfoCountAggregateInputType = {
  id?: true
  flow_id?: true
  timestamp?: true
  extra_data?: true
  _all?: true
}

export type FileinfoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which fileinfo to aggregate.
   */
  where?: Prisma.fileinfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of fileinfos to fetch.
   */
  orderBy?: Prisma.fileinfoOrderByWithRelationInput | Prisma.fileinfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.fileinfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` fileinfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` fileinfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned fileinfos
  **/
  _count?: true | FileinfoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FileinfoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FileinfoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FileinfoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FileinfoMaxAggregateInputType
}

export type GetFileinfoAggregateType<T extends FileinfoAggregateArgs> = {
      [P in keyof T & keyof AggregateFileinfo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFileinfo[P]>
    : Prisma.GetScalarType<T[P], AggregateFileinfo[P]>
}




export type fileinfoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.fileinfoWhereInput
  orderBy?: Prisma.fileinfoOrderByWithAggregationInput | Prisma.fileinfoOrderByWithAggregationInput[]
  by: Prisma.FileinfoScalarFieldEnum[] | Prisma.FileinfoScalarFieldEnum
  having?: Prisma.fileinfoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FileinfoCountAggregateInputType | true
  _avg?: FileinfoAvgAggregateInputType
  _sum?: FileinfoSumAggregateInputType
  _min?: FileinfoMinAggregateInputType
  _max?: FileinfoMaxAggregateInputType
}

export type FileinfoGroupByOutputType = {
  id: number
  flow_id: number
  timestamp: number
  extra_data: string | null
  _count: FileinfoCountAggregateOutputType | null
  _avg: FileinfoAvgAggregateOutputType | null
  _sum: FileinfoSumAggregateOutputType | null
  _min: FileinfoMinAggregateOutputType | null
  _max: FileinfoMaxAggregateOutputType | null
}

type GetFileinfoGroupByPayload<T extends fileinfoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FileinfoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FileinfoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FileinfoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FileinfoGroupByOutputType[P]>
      }
    >
  > 



export type fileinfoWhereInput = {
  AND?: Prisma.fileinfoWhereInput | Prisma.fileinfoWhereInput[]
  OR?: Prisma.fileinfoWhereInput[]
  NOT?: Prisma.fileinfoWhereInput | Prisma.fileinfoWhereInput[]
  id?: Prisma.IntFilter<"fileinfo"> | number
  flow_id?: Prisma.IntFilter<"fileinfo"> | number
  timestamp?: Prisma.IntFilter<"fileinfo"> | number
  extra_data?: Prisma.StringNullableFilter<"fileinfo"> | string | null
}

export type fileinfoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type fileinfoWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  flow_id_timestamp?: Prisma.fileinfoFlow_idTimestampCompoundUniqueInput
  AND?: Prisma.fileinfoWhereInput | Prisma.fileinfoWhereInput[]
  OR?: Prisma.fileinfoWhereInput[]
  NOT?: Prisma.fileinfoWhereInput | Prisma.fileinfoWhereInput[]
  flow_id?: Prisma.IntFilter<"fileinfo"> | number
  timestamp?: Prisma.IntFilter<"fileinfo"> | number
  extra_data?: Prisma.StringNullableFilter<"fileinfo"> | string | null
}, "id" | "flow_id_timestamp">

export type fileinfoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.fileinfoCountOrderByAggregateInput
  _avg?: Prisma.fileinfoAvgOrderByAggregateInput
  _max?: Prisma.fileinfoMaxOrderByAggregateInput
  _min?: Prisma.fileinfoMinOrderByAggregateInput
  _sum?: Prisma.fileinfoSumOrderByAggregateInput
}

export type fileinfoScalarWhereWithAggregatesInput = {
  AND?: Prisma.fileinfoScalarWhereWithAggregatesInput | Prisma.fileinfoScalarWhereWithAggregatesInput[]
  OR?: Prisma.fileinfoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.fileinfoScalarWhereWithAggregatesInput | Prisma.fileinfoScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"fileinfo"> | number
  flow_id?: Prisma.IntWithAggregatesFilter<"fileinfo"> | number
  timestamp?: Prisma.IntWithAggregatesFilter<"fileinfo"> | number
  extra_data?: Prisma.StringNullableWithAggregatesFilter<"fileinfo"> | string | null
}

export type fileinfoCreateInput = {
  flow_id: number
  timestamp: number
  extra_data?: string | null
}

export type fileinfoUncheckedCreateInput = {
  id?: number
  flow_id: number
  timestamp: number
  extra_data?: string | null
}

export type fileinfoUpdateInput = {
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type fileinfoUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type fileinfoCreateManyInput = {
  id?: number
  flow_id: number
  timestamp: number
  extra_data?: string | null
}

export type fileinfoUpdateManyMutationInput = {
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type fileinfoUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  timestamp?: Prisma.IntFieldUpdateOperationsInput | number
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type fileinfoFlow_idTimestampCompoundUniqueInput = {
  flow_id: number
  timestamp: number
}

export type fileinfoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type fileinfoAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type fileinfoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type fileinfoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type fileinfoSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}



export type fileinfoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["fileinfo"]>

export type fileinfoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["fileinfo"]>

export type fileinfoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["fileinfo"]>

export type fileinfoSelectScalar = {
  id?: boolean
  flow_id?: boolean
  timestamp?: boolean
  extra_data?: boolean
}

export type fileinfoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "flow_id" | "timestamp" | "extra_data", ExtArgs["result"]["fileinfo"]>

export type $fileinfoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "fileinfo"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    flow_id: number
    timestamp: number
    extra_data: string | null
  }, ExtArgs["result"]["fileinfo"]>
  composites: {}
}

export type fileinfoGetPayload<S extends boolean | null | undefined | fileinfoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$fileinfoPayload, S>

export type fileinfoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<fileinfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FileinfoCountAggregateInputType | true
  }

export interface fileinfoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['fileinfo'], meta: { name: 'fileinfo' } }
  /**
   * Find zero or one Fileinfo that matches the filter.
   * @param {fileinfoFindUniqueArgs} args - Arguments to find a Fileinfo
   * @example
   * // Get one Fileinfo
   * const fileinfo = await prisma.fileinfo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends fileinfoFindUniqueArgs>(args: Prisma.SelectSubset<T, fileinfoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__fileinfoClient<runtime.Types.Result.GetResult<Prisma.$fileinfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Fileinfo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {fileinfoFindUniqueOrThrowArgs} args - Arguments to find a Fileinfo
   * @example
   * // Get one Fileinfo
   * const fileinfo = await prisma.fileinfo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends fileinfoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, fileinfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__fileinfoClient<runtime.Types.Result.GetResult<Prisma.$fileinfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Fileinfo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fileinfoFindFirstArgs} args - Arguments to find a Fileinfo
   * @example
   * // Get one Fileinfo
   * const fileinfo = await prisma.fileinfo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends fileinfoFindFirstArgs>(args?: Prisma.SelectSubset<T, fileinfoFindFirstArgs<ExtArgs>>): Prisma.Prisma__fileinfoClient<runtime.Types.Result.GetResult<Prisma.$fileinfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Fileinfo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fileinfoFindFirstOrThrowArgs} args - Arguments to find a Fileinfo
   * @example
   * // Get one Fileinfo
   * const fileinfo = await prisma.fileinfo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends fileinfoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, fileinfoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__fileinfoClient<runtime.Types.Result.GetResult<Prisma.$fileinfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Fileinfos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fileinfoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Fileinfos
   * const fileinfos = await prisma.fileinfo.findMany()
   * 
   * // Get first 10 Fileinfos
   * const fileinfos = await prisma.fileinfo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const fileinfoWithIdOnly = await prisma.fileinfo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends fileinfoFindManyArgs>(args?: Prisma.SelectSubset<T, fileinfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$fileinfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Fileinfo.
   * @param {fileinfoCreateArgs} args - Arguments to create a Fileinfo.
   * @example
   * // Create one Fileinfo
   * const Fileinfo = await prisma.fileinfo.create({
   *   data: {
   *     // ... data to create a Fileinfo
   *   }
   * })
   * 
   */
  create<T extends fileinfoCreateArgs>(args: Prisma.SelectSubset<T, fileinfoCreateArgs<ExtArgs>>): Prisma.Prisma__fileinfoClient<runtime.Types.Result.GetResult<Prisma.$fileinfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Fileinfos.
   * @param {fileinfoCreateManyArgs} args - Arguments to create many Fileinfos.
   * @example
   * // Create many Fileinfos
   * const fileinfo = await prisma.fileinfo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends fileinfoCreateManyArgs>(args?: Prisma.SelectSubset<T, fileinfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Fileinfos and returns the data saved in the database.
   * @param {fileinfoCreateManyAndReturnArgs} args - Arguments to create many Fileinfos.
   * @example
   * // Create many Fileinfos
   * const fileinfo = await prisma.fileinfo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Fileinfos and only return the `id`
   * const fileinfoWithIdOnly = await prisma.fileinfo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends fileinfoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, fileinfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$fileinfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Fileinfo.
   * @param {fileinfoDeleteArgs} args - Arguments to delete one Fileinfo.
   * @example
   * // Delete one Fileinfo
   * const Fileinfo = await prisma.fileinfo.delete({
   *   where: {
   *     // ... filter to delete one Fileinfo
   *   }
   * })
   * 
   */
  delete<T extends fileinfoDeleteArgs>(args: Prisma.SelectSubset<T, fileinfoDeleteArgs<ExtArgs>>): Prisma.Prisma__fileinfoClient<runtime.Types.Result.GetResult<Prisma.$fileinfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Fileinfo.
   * @param {fileinfoUpdateArgs} args - Arguments to update one Fileinfo.
   * @example
   * // Update one Fileinfo
   * const fileinfo = await prisma.fileinfo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends fileinfoUpdateArgs>(args: Prisma.SelectSubset<T, fileinfoUpdateArgs<ExtArgs>>): Prisma.Prisma__fileinfoClient<runtime.Types.Result.GetResult<Prisma.$fileinfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Fileinfos.
   * @param {fileinfoDeleteManyArgs} args - Arguments to filter Fileinfos to delete.
   * @example
   * // Delete a few Fileinfos
   * const { count } = await prisma.fileinfo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends fileinfoDeleteManyArgs>(args?: Prisma.SelectSubset<T, fileinfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Fileinfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fileinfoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Fileinfos
   * const fileinfo = await prisma.fileinfo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends fileinfoUpdateManyArgs>(args: Prisma.SelectSubset<T, fileinfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Fileinfos and returns the data updated in the database.
   * @param {fileinfoUpdateManyAndReturnArgs} args - Arguments to update many Fileinfos.
   * @example
   * // Update many Fileinfos
   * const fileinfo = await prisma.fileinfo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Fileinfos and only return the `id`
   * const fileinfoWithIdOnly = await prisma.fileinfo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends fileinfoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, fileinfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$fileinfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Fileinfo.
   * @param {fileinfoUpsertArgs} args - Arguments to update or create a Fileinfo.
   * @example
   * // Update or create a Fileinfo
   * const fileinfo = await prisma.fileinfo.upsert({
   *   create: {
   *     // ... data to create a Fileinfo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Fileinfo we want to update
   *   }
   * })
   */
  upsert<T extends fileinfoUpsertArgs>(args: Prisma.SelectSubset<T, fileinfoUpsertArgs<ExtArgs>>): Prisma.Prisma__fileinfoClient<runtime.Types.Result.GetResult<Prisma.$fileinfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Fileinfos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fileinfoCountArgs} args - Arguments to filter Fileinfos to count.
   * @example
   * // Count the number of Fileinfos
   * const count = await prisma.fileinfo.count({
   *   where: {
   *     // ... the filter for the Fileinfos we want to count
   *   }
   * })
  **/
  count<T extends fileinfoCountArgs>(
    args?: Prisma.Subset<T, fileinfoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FileinfoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Fileinfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileinfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FileinfoAggregateArgs>(args: Prisma.Subset<T, FileinfoAggregateArgs>): Prisma.PrismaPromise<GetFileinfoAggregateType<T>>

  /**
   * Group by Fileinfo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fileinfoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends fileinfoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: fileinfoGroupByArgs['orderBy'] }
      : { orderBy?: fileinfoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, fileinfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileinfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the fileinfo model
 */
readonly fields: fileinfoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for fileinfo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__fileinfoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the fileinfo model
 */
export interface fileinfoFieldRefs {
  readonly id: Prisma.FieldRef<"fileinfo", 'Int'>
  readonly flow_id: Prisma.FieldRef<"fileinfo", 'Int'>
  readonly timestamp: Prisma.FieldRef<"fileinfo", 'Int'>
  readonly extra_data: Prisma.FieldRef<"fileinfo", 'String'>
}
    

// Custom InputTypes
/**
 * fileinfo findUnique
 */
export type fileinfoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fileinfo
   */
  select?: Prisma.fileinfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fileinfo
   */
  omit?: Prisma.fileinfoOmit<ExtArgs> | null
  /**
   * Filter, which fileinfo to fetch.
   */
  where: Prisma.fileinfoWhereUniqueInput
}

/**
 * fileinfo findUniqueOrThrow
 */
export type fileinfoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fileinfo
   */
  select?: Prisma.fileinfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fileinfo
   */
  omit?: Prisma.fileinfoOmit<ExtArgs> | null
  /**
   * Filter, which fileinfo to fetch.
   */
  where: Prisma.fileinfoWhereUniqueInput
}

/**
 * fileinfo findFirst
 */
export type fileinfoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fileinfo
   */
  select?: Prisma.fileinfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fileinfo
   */
  omit?: Prisma.fileinfoOmit<ExtArgs> | null
  /**
   * Filter, which fileinfo to fetch.
   */
  where?: Prisma.fileinfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of fileinfos to fetch.
   */
  orderBy?: Prisma.fileinfoOrderByWithRelationInput | Prisma.fileinfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for fileinfos.
   */
  cursor?: Prisma.fileinfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` fileinfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` fileinfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of fileinfos.
   */
  distinct?: Prisma.FileinfoScalarFieldEnum | Prisma.FileinfoScalarFieldEnum[]
}

/**
 * fileinfo findFirstOrThrow
 */
export type fileinfoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fileinfo
   */
  select?: Prisma.fileinfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fileinfo
   */
  omit?: Prisma.fileinfoOmit<ExtArgs> | null
  /**
   * Filter, which fileinfo to fetch.
   */
  where?: Prisma.fileinfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of fileinfos to fetch.
   */
  orderBy?: Prisma.fileinfoOrderByWithRelationInput | Prisma.fileinfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for fileinfos.
   */
  cursor?: Prisma.fileinfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` fileinfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` fileinfos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of fileinfos.
   */
  distinct?: Prisma.FileinfoScalarFieldEnum | Prisma.FileinfoScalarFieldEnum[]
}

/**
 * fileinfo findMany
 */
export type fileinfoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fileinfo
   */
  select?: Prisma.fileinfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fileinfo
   */
  omit?: Prisma.fileinfoOmit<ExtArgs> | null
  /**
   * Filter, which fileinfos to fetch.
   */
  where?: Prisma.fileinfoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of fileinfos to fetch.
   */
  orderBy?: Prisma.fileinfoOrderByWithRelationInput | Prisma.fileinfoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing fileinfos.
   */
  cursor?: Prisma.fileinfoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` fileinfos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` fileinfos.
   */
  skip?: number
  distinct?: Prisma.FileinfoScalarFieldEnum | Prisma.FileinfoScalarFieldEnum[]
}

/**
 * fileinfo create
 */
export type fileinfoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fileinfo
   */
  select?: Prisma.fileinfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fileinfo
   */
  omit?: Prisma.fileinfoOmit<ExtArgs> | null
  /**
   * The data needed to create a fileinfo.
   */
  data: Prisma.XOR<Prisma.fileinfoCreateInput, Prisma.fileinfoUncheckedCreateInput>
}

/**
 * fileinfo createMany
 */
export type fileinfoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many fileinfos.
   */
  data: Prisma.fileinfoCreateManyInput | Prisma.fileinfoCreateManyInput[]
}

/**
 * fileinfo createManyAndReturn
 */
export type fileinfoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fileinfo
   */
  select?: Prisma.fileinfoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the fileinfo
   */
  omit?: Prisma.fileinfoOmit<ExtArgs> | null
  /**
   * The data used to create many fileinfos.
   */
  data: Prisma.fileinfoCreateManyInput | Prisma.fileinfoCreateManyInput[]
}

/**
 * fileinfo update
 */
export type fileinfoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fileinfo
   */
  select?: Prisma.fileinfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fileinfo
   */
  omit?: Prisma.fileinfoOmit<ExtArgs> | null
  /**
   * The data needed to update a fileinfo.
   */
  data: Prisma.XOR<Prisma.fileinfoUpdateInput, Prisma.fileinfoUncheckedUpdateInput>
  /**
   * Choose, which fileinfo to update.
   */
  where: Prisma.fileinfoWhereUniqueInput
}

/**
 * fileinfo updateMany
 */
export type fileinfoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update fileinfos.
   */
  data: Prisma.XOR<Prisma.fileinfoUpdateManyMutationInput, Prisma.fileinfoUncheckedUpdateManyInput>
  /**
   * Filter which fileinfos to update
   */
  where?: Prisma.fileinfoWhereInput
  /**
   * Limit how many fileinfos to update.
   */
  limit?: number
}

/**
 * fileinfo updateManyAndReturn
 */
export type fileinfoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fileinfo
   */
  select?: Prisma.fileinfoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the fileinfo
   */
  omit?: Prisma.fileinfoOmit<ExtArgs> | null
  /**
   * The data used to update fileinfos.
   */
  data: Prisma.XOR<Prisma.fileinfoUpdateManyMutationInput, Prisma.fileinfoUncheckedUpdateManyInput>
  /**
   * Filter which fileinfos to update
   */
  where?: Prisma.fileinfoWhereInput
  /**
   * Limit how many fileinfos to update.
   */
  limit?: number
}

/**
 * fileinfo upsert
 */
export type fileinfoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fileinfo
   */
  select?: Prisma.fileinfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fileinfo
   */
  omit?: Prisma.fileinfoOmit<ExtArgs> | null
  /**
   * The filter to search for the fileinfo to update in case it exists.
   */
  where: Prisma.fileinfoWhereUniqueInput
  /**
   * In case the fileinfo found by the `where` argument doesn't exist, create a new fileinfo with this data.
   */
  create: Prisma.XOR<Prisma.fileinfoCreateInput, Prisma.fileinfoUncheckedCreateInput>
  /**
   * In case the fileinfo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.fileinfoUpdateInput, Prisma.fileinfoUncheckedUpdateInput>
}

/**
 * fileinfo delete
 */
export type fileinfoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fileinfo
   */
  select?: Prisma.fileinfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fileinfo
   */
  omit?: Prisma.fileinfoOmit<ExtArgs> | null
  /**
   * Filter which fileinfo to delete.
   */
  where: Prisma.fileinfoWhereUniqueInput
}

/**
 * fileinfo deleteMany
 */
export type fileinfoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which fileinfos to delete
   */
  where?: Prisma.fileinfoWhereInput
  /**
   * Limit how many fileinfos to delete.
   */
  limit?: number
}

/**
 * fileinfo without action
 */
export type fileinfoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fileinfo
   */
  select?: Prisma.fileinfoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fileinfo
   */
  omit?: Prisma.fileinfoOmit<ExtArgs> | null
}
