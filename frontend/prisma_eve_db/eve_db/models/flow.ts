
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `flow` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model flow
 * 
 */
export type flowModel = runtime.Types.Result.DefaultSelection<Prisma.$flowPayload>

export type AggregateFlow = {
  _count: FlowCountAggregateOutputType | null
  _avg: FlowAvgAggregateOutputType | null
  _sum: FlowSumAggregateOutputType | null
  _min: FlowMinAggregateOutputType | null
  _max: FlowMaxAggregateOutputType | null
}

export type FlowAvgAggregateOutputType = {
  id: number | null
  src_port: number | null
  dest_port: number | null
}

export type FlowSumAggregateOutputType = {
  id: number | null
  src_port: number | null
  dest_port: number | null
}

export type FlowMinAggregateOutputType = {
  id: number | null
  src_ip: string | null
  src_port: number | null
  dest_ip: string | null
  dest_port: number | null
  pcap_filename: string | null
  proto: string | null
  app_proto: string | null
  metadata: string | null
  extra_data: string | null
}

export type FlowMaxAggregateOutputType = {
  id: number | null
  src_ip: string | null
  src_port: number | null
  dest_ip: string | null
  dest_port: number | null
  pcap_filename: string | null
  proto: string | null
  app_proto: string | null
  metadata: string | null
  extra_data: string | null
}

export type FlowCountAggregateOutputType = {
  id: number
  src_ip: number
  src_port: number
  dest_ip: number
  dest_port: number
  pcap_filename: number
  proto: number
  app_proto: number
  metadata: number
  extra_data: number
  _all: number
}


export type FlowAvgAggregateInputType = {
  id?: true
  src_port?: true
  dest_port?: true
}

export type FlowSumAggregateInputType = {
  id?: true
  src_port?: true
  dest_port?: true
}

export type FlowMinAggregateInputType = {
  id?: true
  src_ip?: true
  src_port?: true
  dest_ip?: true
  dest_port?: true
  pcap_filename?: true
  proto?: true
  app_proto?: true
  metadata?: true
  extra_data?: true
}

export type FlowMaxAggregateInputType = {
  id?: true
  src_ip?: true
  src_port?: true
  dest_ip?: true
  dest_port?: true
  pcap_filename?: true
  proto?: true
  app_proto?: true
  metadata?: true
  extra_data?: true
}

export type FlowCountAggregateInputType = {
  id?: true
  src_ip?: true
  src_port?: true
  dest_ip?: true
  dest_port?: true
  pcap_filename?: true
  proto?: true
  app_proto?: true
  metadata?: true
  extra_data?: true
  _all?: true
}

export type FlowAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which flow to aggregate.
   */
  where?: Prisma.flowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of flows to fetch.
   */
  orderBy?: Prisma.flowOrderByWithRelationInput | Prisma.flowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.flowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` flows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` flows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned flows
  **/
  _count?: true | FlowCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FlowAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FlowSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FlowMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FlowMaxAggregateInputType
}

export type GetFlowAggregateType<T extends FlowAggregateArgs> = {
      [P in keyof T & keyof AggregateFlow]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFlow[P]>
    : Prisma.GetScalarType<T[P], AggregateFlow[P]>
}




export type flowGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.flowWhereInput
  orderBy?: Prisma.flowOrderByWithAggregationInput | Prisma.flowOrderByWithAggregationInput[]
  by: Prisma.FlowScalarFieldEnum[] | Prisma.FlowScalarFieldEnum
  having?: Prisma.flowScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FlowCountAggregateInputType | true
  _avg?: FlowAvgAggregateInputType
  _sum?: FlowSumAggregateInputType
  _min?: FlowMinAggregateInputType
  _max?: FlowMaxAggregateInputType
}

export type FlowGroupByOutputType = {
  id: number
  src_ip: string
  src_port: number | null
  dest_ip: string
  dest_port: number | null
  pcap_filename: string | null
  proto: string
  app_proto: string | null
  metadata: string | null
  extra_data: string | null
  _count: FlowCountAggregateOutputType | null
  _avg: FlowAvgAggregateOutputType | null
  _sum: FlowSumAggregateOutputType | null
  _min: FlowMinAggregateOutputType | null
  _max: FlowMaxAggregateOutputType | null
}

type GetFlowGroupByPayload<T extends flowGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FlowGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FlowGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FlowGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FlowGroupByOutputType[P]>
      }
    >
  > 



export type flowWhereInput = {
  AND?: Prisma.flowWhereInput | Prisma.flowWhereInput[]
  OR?: Prisma.flowWhereInput[]
  NOT?: Prisma.flowWhereInput | Prisma.flowWhereInput[]
  id?: Prisma.IntFilter<"flow"> | number
  src_ip?: Prisma.StringFilter<"flow"> | string
  src_port?: Prisma.IntNullableFilter<"flow"> | number | null
  dest_ip?: Prisma.StringFilter<"flow"> | string
  dest_port?: Prisma.IntNullableFilter<"flow"> | number | null
  pcap_filename?: Prisma.StringNullableFilter<"flow"> | string | null
  proto?: Prisma.StringFilter<"flow"> | string
  app_proto?: Prisma.StringNullableFilter<"flow"> | string | null
  metadata?: Prisma.StringNullableFilter<"flow"> | string | null
  extra_data?: Prisma.StringNullableFilter<"flow"> | string | null
}

export type flowOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  src_ip?: Prisma.SortOrder
  src_port?: Prisma.SortOrderInput | Prisma.SortOrder
  dest_ip?: Prisma.SortOrder
  dest_port?: Prisma.SortOrderInput | Prisma.SortOrder
  pcap_filename?: Prisma.SortOrderInput | Prisma.SortOrder
  proto?: Prisma.SortOrder
  app_proto?: Prisma.SortOrderInput | Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  extra_data?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type flowWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.flowWhereInput | Prisma.flowWhereInput[]
  OR?: Prisma.flowWhereInput[]
  NOT?: Prisma.flowWhereInput | Prisma.flowWhereInput[]
  src_ip?: Prisma.StringFilter<"flow"> | string
  src_port?: Prisma.IntNullableFilter<"flow"> | number | null
  dest_ip?: Prisma.StringFilter<"flow"> | string
  dest_port?: Prisma.IntNullableFilter<"flow"> | number | null
  pcap_filename?: Prisma.StringNullableFilter<"flow"> | string | null
  proto?: Prisma.StringFilter<"flow"> | string
  app_proto?: Prisma.StringNullableFilter<"flow"> | string | null
  metadata?: Prisma.StringNullableFilter<"flow"> | string | null
  extra_data?: Prisma.StringNullableFilter<"flow"> | string | null
}, "id">

export type flowOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  src_ip?: Prisma.SortOrder
  src_port?: Prisma.SortOrderInput | Prisma.SortOrder
  dest_ip?: Prisma.SortOrder
  dest_port?: Prisma.SortOrderInput | Prisma.SortOrder
  pcap_filename?: Prisma.SortOrderInput | Prisma.SortOrder
  proto?: Prisma.SortOrder
  app_proto?: Prisma.SortOrderInput | Prisma.SortOrder
  metadata?: Prisma.SortOrderInput | Prisma.SortOrder
  extra_data?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.flowCountOrderByAggregateInput
  _avg?: Prisma.flowAvgOrderByAggregateInput
  _max?: Prisma.flowMaxOrderByAggregateInput
  _min?: Prisma.flowMinOrderByAggregateInput
  _sum?: Prisma.flowSumOrderByAggregateInput
}

export type flowScalarWhereWithAggregatesInput = {
  AND?: Prisma.flowScalarWhereWithAggregatesInput | Prisma.flowScalarWhereWithAggregatesInput[]
  OR?: Prisma.flowScalarWhereWithAggregatesInput[]
  NOT?: Prisma.flowScalarWhereWithAggregatesInput | Prisma.flowScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"flow"> | number
  src_ip?: Prisma.StringWithAggregatesFilter<"flow"> | string
  src_port?: Prisma.IntNullableWithAggregatesFilter<"flow"> | number | null
  dest_ip?: Prisma.StringWithAggregatesFilter<"flow"> | string
  dest_port?: Prisma.IntNullableWithAggregatesFilter<"flow"> | number | null
  pcap_filename?: Prisma.StringNullableWithAggregatesFilter<"flow"> | string | null
  proto?: Prisma.StringWithAggregatesFilter<"flow"> | string
  app_proto?: Prisma.StringNullableWithAggregatesFilter<"flow"> | string | null
  metadata?: Prisma.StringNullableWithAggregatesFilter<"flow"> | string | null
  extra_data?: Prisma.StringNullableWithAggregatesFilter<"flow"> | string | null
}

export type flowCreateInput = {
  src_ip: string
  src_port?: number | null
  dest_ip: string
  dest_port?: number | null
  pcap_filename?: string | null
  proto: string
  app_proto?: string | null
  metadata?: string | null
  extra_data?: string | null
}

export type flowUncheckedCreateInput = {
  id?: number
  src_ip: string
  src_port?: number | null
  dest_ip: string
  dest_port?: number | null
  pcap_filename?: string | null
  proto: string
  app_proto?: string | null
  metadata?: string | null
  extra_data?: string | null
}

export type flowUpdateInput = {
  src_ip?: Prisma.StringFieldUpdateOperationsInput | string
  src_port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dest_ip?: Prisma.StringFieldUpdateOperationsInput | string
  dest_port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pcap_filename?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proto?: Prisma.StringFieldUpdateOperationsInput | string
  app_proto?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type flowUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  src_ip?: Prisma.StringFieldUpdateOperationsInput | string
  src_port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dest_ip?: Prisma.StringFieldUpdateOperationsInput | string
  dest_port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pcap_filename?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proto?: Prisma.StringFieldUpdateOperationsInput | string
  app_proto?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type flowCreateManyInput = {
  id?: number
  src_ip: string
  src_port?: number | null
  dest_ip: string
  dest_port?: number | null
  pcap_filename?: string | null
  proto: string
  app_proto?: string | null
  metadata?: string | null
  extra_data?: string | null
}

export type flowUpdateManyMutationInput = {
  src_ip?: Prisma.StringFieldUpdateOperationsInput | string
  src_port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dest_ip?: Prisma.StringFieldUpdateOperationsInput | string
  dest_port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pcap_filename?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proto?: Prisma.StringFieldUpdateOperationsInput | string
  app_proto?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type flowUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  src_ip?: Prisma.StringFieldUpdateOperationsInput | string
  src_port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  dest_ip?: Prisma.StringFieldUpdateOperationsInput | string
  dest_port?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  pcap_filename?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  proto?: Prisma.StringFieldUpdateOperationsInput | string
  app_proto?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metadata?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  extra_data?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type flowCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  src_ip?: Prisma.SortOrder
  src_port?: Prisma.SortOrder
  dest_ip?: Prisma.SortOrder
  dest_port?: Prisma.SortOrder
  pcap_filename?: Prisma.SortOrder
  proto?: Prisma.SortOrder
  app_proto?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type flowAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  src_port?: Prisma.SortOrder
  dest_port?: Prisma.SortOrder
}

export type flowMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  src_ip?: Prisma.SortOrder
  src_port?: Prisma.SortOrder
  dest_ip?: Prisma.SortOrder
  dest_port?: Prisma.SortOrder
  pcap_filename?: Prisma.SortOrder
  proto?: Prisma.SortOrder
  app_proto?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type flowMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  src_ip?: Prisma.SortOrder
  src_port?: Prisma.SortOrder
  dest_ip?: Prisma.SortOrder
  dest_port?: Prisma.SortOrder
  pcap_filename?: Prisma.SortOrder
  proto?: Prisma.SortOrder
  app_proto?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  extra_data?: Prisma.SortOrder
}

export type flowSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  src_port?: Prisma.SortOrder
  dest_port?: Prisma.SortOrder
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type flowSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  src_ip?: boolean
  src_port?: boolean
  dest_ip?: boolean
  dest_port?: boolean
  pcap_filename?: boolean
  proto?: boolean
  app_proto?: boolean
  metadata?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["flow"]>

export type flowSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  src_ip?: boolean
  src_port?: boolean
  dest_ip?: boolean
  dest_port?: boolean
  pcap_filename?: boolean
  proto?: boolean
  app_proto?: boolean
  metadata?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["flow"]>

export type flowSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  src_ip?: boolean
  src_port?: boolean
  dest_ip?: boolean
  dest_port?: boolean
  pcap_filename?: boolean
  proto?: boolean
  app_proto?: boolean
  metadata?: boolean
  extra_data?: boolean
}, ExtArgs["result"]["flow"]>

export type flowSelectScalar = {
  id?: boolean
  src_ip?: boolean
  src_port?: boolean
  dest_ip?: boolean
  dest_port?: boolean
  pcap_filename?: boolean
  proto?: boolean
  app_proto?: boolean
  metadata?: boolean
  extra_data?: boolean
}

export type flowOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "src_ip" | "src_port" | "dest_ip" | "dest_port" | "pcap_filename" | "proto" | "app_proto" | "metadata" | "extra_data", ExtArgs["result"]["flow"]>

export type $flowPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "flow"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    src_ip: string
    src_port: number | null
    dest_ip: string
    dest_port: number | null
    pcap_filename: string | null
    proto: string
    app_proto: string | null
    metadata: string | null
    extra_data: string | null
  }, ExtArgs["result"]["flow"]>
  composites: {}
}

export type flowGetPayload<S extends boolean | null | undefined | flowDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$flowPayload, S>

export type flowCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<flowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FlowCountAggregateInputType | true
  }

export interface flowDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['flow'], meta: { name: 'flow' } }
  /**
   * Find zero or one Flow that matches the filter.
   * @param {flowFindUniqueArgs} args - Arguments to find a Flow
   * @example
   * // Get one Flow
   * const flow = await prisma.flow.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends flowFindUniqueArgs>(args: Prisma.SelectSubset<T, flowFindUniqueArgs<ExtArgs>>): Prisma.Prisma__flowClient<runtime.Types.Result.GetResult<Prisma.$flowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Flow that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {flowFindUniqueOrThrowArgs} args - Arguments to find a Flow
   * @example
   * // Get one Flow
   * const flow = await prisma.flow.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends flowFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, flowFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__flowClient<runtime.Types.Result.GetResult<Prisma.$flowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Flow that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {flowFindFirstArgs} args - Arguments to find a Flow
   * @example
   * // Get one Flow
   * const flow = await prisma.flow.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends flowFindFirstArgs>(args?: Prisma.SelectSubset<T, flowFindFirstArgs<ExtArgs>>): Prisma.Prisma__flowClient<runtime.Types.Result.GetResult<Prisma.$flowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Flow that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {flowFindFirstOrThrowArgs} args - Arguments to find a Flow
   * @example
   * // Get one Flow
   * const flow = await prisma.flow.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends flowFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, flowFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__flowClient<runtime.Types.Result.GetResult<Prisma.$flowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Flows that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {flowFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Flows
   * const flows = await prisma.flow.findMany()
   * 
   * // Get first 10 Flows
   * const flows = await prisma.flow.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const flowWithIdOnly = await prisma.flow.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends flowFindManyArgs>(args?: Prisma.SelectSubset<T, flowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$flowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Flow.
   * @param {flowCreateArgs} args - Arguments to create a Flow.
   * @example
   * // Create one Flow
   * const Flow = await prisma.flow.create({
   *   data: {
   *     // ... data to create a Flow
   *   }
   * })
   * 
   */
  create<T extends flowCreateArgs>(args: Prisma.SelectSubset<T, flowCreateArgs<ExtArgs>>): Prisma.Prisma__flowClient<runtime.Types.Result.GetResult<Prisma.$flowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Flows.
   * @param {flowCreateManyArgs} args - Arguments to create many Flows.
   * @example
   * // Create many Flows
   * const flow = await prisma.flow.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends flowCreateManyArgs>(args?: Prisma.SelectSubset<T, flowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Flows and returns the data saved in the database.
   * @param {flowCreateManyAndReturnArgs} args - Arguments to create many Flows.
   * @example
   * // Create many Flows
   * const flow = await prisma.flow.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Flows and only return the `id`
   * const flowWithIdOnly = await prisma.flow.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends flowCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, flowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$flowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Flow.
   * @param {flowDeleteArgs} args - Arguments to delete one Flow.
   * @example
   * // Delete one Flow
   * const Flow = await prisma.flow.delete({
   *   where: {
   *     // ... filter to delete one Flow
   *   }
   * })
   * 
   */
  delete<T extends flowDeleteArgs>(args: Prisma.SelectSubset<T, flowDeleteArgs<ExtArgs>>): Prisma.Prisma__flowClient<runtime.Types.Result.GetResult<Prisma.$flowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Flow.
   * @param {flowUpdateArgs} args - Arguments to update one Flow.
   * @example
   * // Update one Flow
   * const flow = await prisma.flow.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends flowUpdateArgs>(args: Prisma.SelectSubset<T, flowUpdateArgs<ExtArgs>>): Prisma.Prisma__flowClient<runtime.Types.Result.GetResult<Prisma.$flowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Flows.
   * @param {flowDeleteManyArgs} args - Arguments to filter Flows to delete.
   * @example
   * // Delete a few Flows
   * const { count } = await prisma.flow.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends flowDeleteManyArgs>(args?: Prisma.SelectSubset<T, flowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Flows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {flowUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Flows
   * const flow = await prisma.flow.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends flowUpdateManyArgs>(args: Prisma.SelectSubset<T, flowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Flows and returns the data updated in the database.
   * @param {flowUpdateManyAndReturnArgs} args - Arguments to update many Flows.
   * @example
   * // Update many Flows
   * const flow = await prisma.flow.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Flows and only return the `id`
   * const flowWithIdOnly = await prisma.flow.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends flowUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, flowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$flowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Flow.
   * @param {flowUpsertArgs} args - Arguments to update or create a Flow.
   * @example
   * // Update or create a Flow
   * const flow = await prisma.flow.upsert({
   *   create: {
   *     // ... data to create a Flow
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Flow we want to update
   *   }
   * })
   */
  upsert<T extends flowUpsertArgs>(args: Prisma.SelectSubset<T, flowUpsertArgs<ExtArgs>>): Prisma.Prisma__flowClient<runtime.Types.Result.GetResult<Prisma.$flowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Flows.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {flowCountArgs} args - Arguments to filter Flows to count.
   * @example
   * // Count the number of Flows
   * const count = await prisma.flow.count({
   *   where: {
   *     // ... the filter for the Flows we want to count
   *   }
   * })
  **/
  count<T extends flowCountArgs>(
    args?: Prisma.Subset<T, flowCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FlowCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Flow.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FlowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FlowAggregateArgs>(args: Prisma.Subset<T, FlowAggregateArgs>): Prisma.PrismaPromise<GetFlowAggregateType<T>>

  /**
   * Group by Flow.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {flowGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends flowGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: flowGroupByArgs['orderBy'] }
      : { orderBy?: flowGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, flowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the flow model
 */
readonly fields: flowFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for flow.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__flowClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the flow model
 */
export interface flowFieldRefs {
  readonly id: Prisma.FieldRef<"flow", 'Int'>
  readonly src_ip: Prisma.FieldRef<"flow", 'String'>
  readonly src_port: Prisma.FieldRef<"flow", 'Int'>
  readonly dest_ip: Prisma.FieldRef<"flow", 'String'>
  readonly dest_port: Prisma.FieldRef<"flow", 'Int'>
  readonly pcap_filename: Prisma.FieldRef<"flow", 'String'>
  readonly proto: Prisma.FieldRef<"flow", 'String'>
  readonly app_proto: Prisma.FieldRef<"flow", 'String'>
  readonly metadata: Prisma.FieldRef<"flow", 'String'>
  readonly extra_data: Prisma.FieldRef<"flow", 'String'>
}
    

// Custom InputTypes
/**
 * flow findUnique
 */
export type flowFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the flow
   */
  select?: Prisma.flowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the flow
   */
  omit?: Prisma.flowOmit<ExtArgs> | null
  /**
   * Filter, which flow to fetch.
   */
  where: Prisma.flowWhereUniqueInput
}

/**
 * flow findUniqueOrThrow
 */
export type flowFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the flow
   */
  select?: Prisma.flowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the flow
   */
  omit?: Prisma.flowOmit<ExtArgs> | null
  /**
   * Filter, which flow to fetch.
   */
  where: Prisma.flowWhereUniqueInput
}

/**
 * flow findFirst
 */
export type flowFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the flow
   */
  select?: Prisma.flowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the flow
   */
  omit?: Prisma.flowOmit<ExtArgs> | null
  /**
   * Filter, which flow to fetch.
   */
  where?: Prisma.flowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of flows to fetch.
   */
  orderBy?: Prisma.flowOrderByWithRelationInput | Prisma.flowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for flows.
   */
  cursor?: Prisma.flowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` flows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` flows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of flows.
   */
  distinct?: Prisma.FlowScalarFieldEnum | Prisma.FlowScalarFieldEnum[]
}

/**
 * flow findFirstOrThrow
 */
export type flowFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the flow
   */
  select?: Prisma.flowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the flow
   */
  omit?: Prisma.flowOmit<ExtArgs> | null
  /**
   * Filter, which flow to fetch.
   */
  where?: Prisma.flowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of flows to fetch.
   */
  orderBy?: Prisma.flowOrderByWithRelationInput | Prisma.flowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for flows.
   */
  cursor?: Prisma.flowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` flows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` flows.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of flows.
   */
  distinct?: Prisma.FlowScalarFieldEnum | Prisma.FlowScalarFieldEnum[]
}

/**
 * flow findMany
 */
export type flowFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the flow
   */
  select?: Prisma.flowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the flow
   */
  omit?: Prisma.flowOmit<ExtArgs> | null
  /**
   * Filter, which flows to fetch.
   */
  where?: Prisma.flowWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of flows to fetch.
   */
  orderBy?: Prisma.flowOrderByWithRelationInput | Prisma.flowOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing flows.
   */
  cursor?: Prisma.flowWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` flows from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` flows.
   */
  skip?: number
  distinct?: Prisma.FlowScalarFieldEnum | Prisma.FlowScalarFieldEnum[]
}

/**
 * flow create
 */
export type flowCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the flow
   */
  select?: Prisma.flowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the flow
   */
  omit?: Prisma.flowOmit<ExtArgs> | null
  /**
   * The data needed to create a flow.
   */
  data: Prisma.XOR<Prisma.flowCreateInput, Prisma.flowUncheckedCreateInput>
}

/**
 * flow createMany
 */
export type flowCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many flows.
   */
  data: Prisma.flowCreateManyInput | Prisma.flowCreateManyInput[]
}

/**
 * flow createManyAndReturn
 */
export type flowCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the flow
   */
  select?: Prisma.flowSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the flow
   */
  omit?: Prisma.flowOmit<ExtArgs> | null
  /**
   * The data used to create many flows.
   */
  data: Prisma.flowCreateManyInput | Prisma.flowCreateManyInput[]
}

/**
 * flow update
 */
export type flowUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the flow
   */
  select?: Prisma.flowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the flow
   */
  omit?: Prisma.flowOmit<ExtArgs> | null
  /**
   * The data needed to update a flow.
   */
  data: Prisma.XOR<Prisma.flowUpdateInput, Prisma.flowUncheckedUpdateInput>
  /**
   * Choose, which flow to update.
   */
  where: Prisma.flowWhereUniqueInput
}

/**
 * flow updateMany
 */
export type flowUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update flows.
   */
  data: Prisma.XOR<Prisma.flowUpdateManyMutationInput, Prisma.flowUncheckedUpdateManyInput>
  /**
   * Filter which flows to update
   */
  where?: Prisma.flowWhereInput
  /**
   * Limit how many flows to update.
   */
  limit?: number
}

/**
 * flow updateManyAndReturn
 */
export type flowUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the flow
   */
  select?: Prisma.flowSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the flow
   */
  omit?: Prisma.flowOmit<ExtArgs> | null
  /**
   * The data used to update flows.
   */
  data: Prisma.XOR<Prisma.flowUpdateManyMutationInput, Prisma.flowUncheckedUpdateManyInput>
  /**
   * Filter which flows to update
   */
  where?: Prisma.flowWhereInput
  /**
   * Limit how many flows to update.
   */
  limit?: number
}

/**
 * flow upsert
 */
export type flowUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the flow
   */
  select?: Prisma.flowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the flow
   */
  omit?: Prisma.flowOmit<ExtArgs> | null
  /**
   * The filter to search for the flow to update in case it exists.
   */
  where: Prisma.flowWhereUniqueInput
  /**
   * In case the flow found by the `where` argument doesn't exist, create a new flow with this data.
   */
  create: Prisma.XOR<Prisma.flowCreateInput, Prisma.flowUncheckedCreateInput>
  /**
   * In case the flow was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.flowUpdateInput, Prisma.flowUncheckedUpdateInput>
}

/**
 * flow delete
 */
export type flowDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the flow
   */
  select?: Prisma.flowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the flow
   */
  omit?: Prisma.flowOmit<ExtArgs> | null
  /**
   * Filter which flow to delete.
   */
  where: Prisma.flowWhereUniqueInput
}

/**
 * flow deleteMany
 */
export type flowDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which flows to delete
   */
  where?: Prisma.flowWhereInput
  /**
   * Limit how many flows to delete.
   */
  limit?: number
}

/**
 * flow without action
 */
export type flowDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the flow
   */
  select?: Prisma.flowSelect<ExtArgs> | null
  /**
   * Omit specific fields from the flow
   */
  omit?: Prisma.flowOmit<ExtArgs> | null
}
