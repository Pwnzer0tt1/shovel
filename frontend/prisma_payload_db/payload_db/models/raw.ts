
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `raw` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model raw
 * 
 */
export type rawModel = runtime.Types.Result.DefaultSelection<Prisma.$rawPayload>

export type AggregateRaw = {
  _count: RawCountAggregateOutputType | null
  _avg: RawAvgAggregateOutputType | null
  _sum: RawSumAggregateOutputType | null
  _min: RawMinAggregateOutputType | null
  _max: RawMaxAggregateOutputType | null
}

export type RawAvgAggregateOutputType = {
  id: number | null
  flow_id: number | null
  count: number | null
  server_to_client: number | null
}

export type RawSumAggregateOutputType = {
  id: number | null
  flow_id: number | null
  count: number | null
  server_to_client: number | null
}

export type RawMinAggregateOutputType = {
  id: number | null
  flow_id: number | null
  count: number | null
  server_to_client: number | null
  blob: Uint8Array | null
}

export type RawMaxAggregateOutputType = {
  id: number | null
  flow_id: number | null
  count: number | null
  server_to_client: number | null
  blob: Uint8Array | null
}

export type RawCountAggregateOutputType = {
  id: number
  flow_id: number
  count: number
  server_to_client: number
  blob: number
  _all: number
}


export type RawAvgAggregateInputType = {
  id?: true
  flow_id?: true
  count?: true
  server_to_client?: true
}

export type RawSumAggregateInputType = {
  id?: true
  flow_id?: true
  count?: true
  server_to_client?: true
}

export type RawMinAggregateInputType = {
  id?: true
  flow_id?: true
  count?: true
  server_to_client?: true
  blob?: true
}

export type RawMaxAggregateInputType = {
  id?: true
  flow_id?: true
  count?: true
  server_to_client?: true
  blob?: true
}

export type RawCountAggregateInputType = {
  id?: true
  flow_id?: true
  count?: true
  server_to_client?: true
  blob?: true
  _all?: true
}

export type RawAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which raw to aggregate.
   */
  where?: Prisma.rawWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of raws to fetch.
   */
  orderBy?: Prisma.rawOrderByWithRelationInput | Prisma.rawOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.rawWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` raws from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` raws.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned raws
  **/
  _count?: true | RawCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RawAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RawSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RawMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RawMaxAggregateInputType
}

export type GetRawAggregateType<T extends RawAggregateArgs> = {
      [P in keyof T & keyof AggregateRaw]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRaw[P]>
    : Prisma.GetScalarType<T[P], AggregateRaw[P]>
}




export type rawGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.rawWhereInput
  orderBy?: Prisma.rawOrderByWithAggregationInput | Prisma.rawOrderByWithAggregationInput[]
  by: Prisma.RawScalarFieldEnum[] | Prisma.RawScalarFieldEnum
  having?: Prisma.rawScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RawCountAggregateInputType | true
  _avg?: RawAvgAggregateInputType
  _sum?: RawSumAggregateInputType
  _min?: RawMinAggregateInputType
  _max?: RawMaxAggregateInputType
}

export type RawGroupByOutputType = {
  id: number
  flow_id: number
  count: number | null
  server_to_client: number | null
  blob: Uint8Array | null
  _count: RawCountAggregateOutputType | null
  _avg: RawAvgAggregateOutputType | null
  _sum: RawSumAggregateOutputType | null
  _min: RawMinAggregateOutputType | null
  _max: RawMaxAggregateOutputType | null
}

type GetRawGroupByPayload<T extends rawGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RawGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RawGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RawGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RawGroupByOutputType[P]>
      }
    >
  > 



export type rawWhereInput = {
  AND?: Prisma.rawWhereInput | Prisma.rawWhereInput[]
  OR?: Prisma.rawWhereInput[]
  NOT?: Prisma.rawWhereInput | Prisma.rawWhereInput[]
  id?: Prisma.IntFilter<"raw"> | number
  flow_id?: Prisma.IntFilter<"raw"> | number
  count?: Prisma.IntNullableFilter<"raw"> | number | null
  server_to_client?: Prisma.IntNullableFilter<"raw"> | number | null
  blob?: Prisma.BytesNullableFilter<"raw"> | Uint8Array | null
}

export type rawOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  count?: Prisma.SortOrderInput | Prisma.SortOrder
  server_to_client?: Prisma.SortOrderInput | Prisma.SortOrder
  blob?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type rawWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  flow_id_count?: Prisma.rawFlow_idCountCompoundUniqueInput
  AND?: Prisma.rawWhereInput | Prisma.rawWhereInput[]
  OR?: Prisma.rawWhereInput[]
  NOT?: Prisma.rawWhereInput | Prisma.rawWhereInput[]
  flow_id?: Prisma.IntFilter<"raw"> | number
  count?: Prisma.IntNullableFilter<"raw"> | number | null
  server_to_client?: Prisma.IntNullableFilter<"raw"> | number | null
  blob?: Prisma.BytesNullableFilter<"raw"> | Uint8Array | null
}, "id" | "flow_id_count">

export type rawOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  count?: Prisma.SortOrderInput | Prisma.SortOrder
  server_to_client?: Prisma.SortOrderInput | Prisma.SortOrder
  blob?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.rawCountOrderByAggregateInput
  _avg?: Prisma.rawAvgOrderByAggregateInput
  _max?: Prisma.rawMaxOrderByAggregateInput
  _min?: Prisma.rawMinOrderByAggregateInput
  _sum?: Prisma.rawSumOrderByAggregateInput
}

export type rawScalarWhereWithAggregatesInput = {
  AND?: Prisma.rawScalarWhereWithAggregatesInput | Prisma.rawScalarWhereWithAggregatesInput[]
  OR?: Prisma.rawScalarWhereWithAggregatesInput[]
  NOT?: Prisma.rawScalarWhereWithAggregatesInput | Prisma.rawScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"raw"> | number
  flow_id?: Prisma.IntWithAggregatesFilter<"raw"> | number
  count?: Prisma.IntNullableWithAggregatesFilter<"raw"> | number | null
  server_to_client?: Prisma.IntNullableWithAggregatesFilter<"raw"> | number | null
  blob?: Prisma.BytesNullableWithAggregatesFilter<"raw"> | Uint8Array | null
}

export type rawCreateInput = {
  flow_id: number
  count?: number | null
  server_to_client?: number | null
  blob?: Uint8Array | null
}

export type rawUncheckedCreateInput = {
  id?: number
  flow_id: number
  count?: number | null
  server_to_client?: number | null
  blob?: Uint8Array | null
}

export type rawUpdateInput = {
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  count?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  server_to_client?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  blob?: Prisma.NullableBytesFieldUpdateOperationsInput | Uint8Array | null
}

export type rawUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  count?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  server_to_client?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  blob?: Prisma.NullableBytesFieldUpdateOperationsInput | Uint8Array | null
}

export type rawCreateManyInput = {
  id?: number
  flow_id: number
  count?: number | null
  server_to_client?: number | null
  blob?: Uint8Array | null
}

export type rawUpdateManyMutationInput = {
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  count?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  server_to_client?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  blob?: Prisma.NullableBytesFieldUpdateOperationsInput | Uint8Array | null
}

export type rawUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  flow_id?: Prisma.IntFieldUpdateOperationsInput | number
  count?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  server_to_client?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  blob?: Prisma.NullableBytesFieldUpdateOperationsInput | Uint8Array | null
}

export type rawFlow_idCountCompoundUniqueInput = {
  flow_id: number
  count: number
}

export type rawCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  count?: Prisma.SortOrder
  server_to_client?: Prisma.SortOrder
  blob?: Prisma.SortOrder
}

export type rawAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  count?: Prisma.SortOrder
  server_to_client?: Prisma.SortOrder
}

export type rawMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  count?: Prisma.SortOrder
  server_to_client?: Prisma.SortOrder
  blob?: Prisma.SortOrder
}

export type rawMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  count?: Prisma.SortOrder
  server_to_client?: Prisma.SortOrder
  blob?: Prisma.SortOrder
}

export type rawSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  flow_id?: Prisma.SortOrder
  count?: Prisma.SortOrder
  server_to_client?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableBytesFieldUpdateOperationsInput = {
  set?: Uint8Array | null
}



export type rawSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  count?: boolean
  server_to_client?: boolean
  blob?: boolean
}, ExtArgs["result"]["raw"]>

export type rawSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  count?: boolean
  server_to_client?: boolean
  blob?: boolean
}, ExtArgs["result"]["raw"]>

export type rawSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  flow_id?: boolean
  count?: boolean
  server_to_client?: boolean
  blob?: boolean
}, ExtArgs["result"]["raw"]>

export type rawSelectScalar = {
  id?: boolean
  flow_id?: boolean
  count?: boolean
  server_to_client?: boolean
  blob?: boolean
}

export type rawOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "flow_id" | "count" | "server_to_client" | "blob", ExtArgs["result"]["raw"]>

export type $rawPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "raw"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    flow_id: number
    count: number | null
    server_to_client: number | null
    blob: Uint8Array | null
  }, ExtArgs["result"]["raw"]>
  composites: {}
}

export type rawGetPayload<S extends boolean | null | undefined | rawDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$rawPayload, S>

export type rawCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<rawFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RawCountAggregateInputType | true
  }

export interface rawDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['raw'], meta: { name: 'raw' } }
  /**
   * Find zero or one Raw that matches the filter.
   * @param {rawFindUniqueArgs} args - Arguments to find a Raw
   * @example
   * // Get one Raw
   * const raw = await prisma.raw.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends rawFindUniqueArgs>(args: Prisma.SelectSubset<T, rawFindUniqueArgs<ExtArgs>>): Prisma.Prisma__rawClient<runtime.Types.Result.GetResult<Prisma.$rawPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Raw that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {rawFindUniqueOrThrowArgs} args - Arguments to find a Raw
   * @example
   * // Get one Raw
   * const raw = await prisma.raw.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends rawFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, rawFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__rawClient<runtime.Types.Result.GetResult<Prisma.$rawPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Raw that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rawFindFirstArgs} args - Arguments to find a Raw
   * @example
   * // Get one Raw
   * const raw = await prisma.raw.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends rawFindFirstArgs>(args?: Prisma.SelectSubset<T, rawFindFirstArgs<ExtArgs>>): Prisma.Prisma__rawClient<runtime.Types.Result.GetResult<Prisma.$rawPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Raw that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rawFindFirstOrThrowArgs} args - Arguments to find a Raw
   * @example
   * // Get one Raw
   * const raw = await prisma.raw.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends rawFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, rawFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__rawClient<runtime.Types.Result.GetResult<Prisma.$rawPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Raws that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rawFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Raws
   * const raws = await prisma.raw.findMany()
   * 
   * // Get first 10 Raws
   * const raws = await prisma.raw.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const rawWithIdOnly = await prisma.raw.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends rawFindManyArgs>(args?: Prisma.SelectSubset<T, rawFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$rawPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Raw.
   * @param {rawCreateArgs} args - Arguments to create a Raw.
   * @example
   * // Create one Raw
   * const Raw = await prisma.raw.create({
   *   data: {
   *     // ... data to create a Raw
   *   }
   * })
   * 
   */
  create<T extends rawCreateArgs>(args: Prisma.SelectSubset<T, rawCreateArgs<ExtArgs>>): Prisma.Prisma__rawClient<runtime.Types.Result.GetResult<Prisma.$rawPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Raws.
   * @param {rawCreateManyArgs} args - Arguments to create many Raws.
   * @example
   * // Create many Raws
   * const raw = await prisma.raw.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends rawCreateManyArgs>(args?: Prisma.SelectSubset<T, rawCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Raws and returns the data saved in the database.
   * @param {rawCreateManyAndReturnArgs} args - Arguments to create many Raws.
   * @example
   * // Create many Raws
   * const raw = await prisma.raw.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Raws and only return the `id`
   * const rawWithIdOnly = await prisma.raw.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends rawCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, rawCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$rawPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Raw.
   * @param {rawDeleteArgs} args - Arguments to delete one Raw.
   * @example
   * // Delete one Raw
   * const Raw = await prisma.raw.delete({
   *   where: {
   *     // ... filter to delete one Raw
   *   }
   * })
   * 
   */
  delete<T extends rawDeleteArgs>(args: Prisma.SelectSubset<T, rawDeleteArgs<ExtArgs>>): Prisma.Prisma__rawClient<runtime.Types.Result.GetResult<Prisma.$rawPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Raw.
   * @param {rawUpdateArgs} args - Arguments to update one Raw.
   * @example
   * // Update one Raw
   * const raw = await prisma.raw.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends rawUpdateArgs>(args: Prisma.SelectSubset<T, rawUpdateArgs<ExtArgs>>): Prisma.Prisma__rawClient<runtime.Types.Result.GetResult<Prisma.$rawPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Raws.
   * @param {rawDeleteManyArgs} args - Arguments to filter Raws to delete.
   * @example
   * // Delete a few Raws
   * const { count } = await prisma.raw.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends rawDeleteManyArgs>(args?: Prisma.SelectSubset<T, rawDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Raws.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rawUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Raws
   * const raw = await prisma.raw.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends rawUpdateManyArgs>(args: Prisma.SelectSubset<T, rawUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Raws and returns the data updated in the database.
   * @param {rawUpdateManyAndReturnArgs} args - Arguments to update many Raws.
   * @example
   * // Update many Raws
   * const raw = await prisma.raw.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Raws and only return the `id`
   * const rawWithIdOnly = await prisma.raw.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends rawUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, rawUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$rawPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Raw.
   * @param {rawUpsertArgs} args - Arguments to update or create a Raw.
   * @example
   * // Update or create a Raw
   * const raw = await prisma.raw.upsert({
   *   create: {
   *     // ... data to create a Raw
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Raw we want to update
   *   }
   * })
   */
  upsert<T extends rawUpsertArgs>(args: Prisma.SelectSubset<T, rawUpsertArgs<ExtArgs>>): Prisma.Prisma__rawClient<runtime.Types.Result.GetResult<Prisma.$rawPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Raws.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rawCountArgs} args - Arguments to filter Raws to count.
   * @example
   * // Count the number of Raws
   * const count = await prisma.raw.count({
   *   where: {
   *     // ... the filter for the Raws we want to count
   *   }
   * })
  **/
  count<T extends rawCountArgs>(
    args?: Prisma.Subset<T, rawCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RawCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Raw.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RawAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RawAggregateArgs>(args: Prisma.Subset<T, RawAggregateArgs>): Prisma.PrismaPromise<GetRawAggregateType<T>>

  /**
   * Group by Raw.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {rawGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends rawGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: rawGroupByArgs['orderBy'] }
      : { orderBy?: rawGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, rawGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRawGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the raw model
 */
readonly fields: rawFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for raw.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__rawClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the raw model
 */
export interface rawFieldRefs {
  readonly id: Prisma.FieldRef<"raw", 'Int'>
  readonly flow_id: Prisma.FieldRef<"raw", 'Int'>
  readonly count: Prisma.FieldRef<"raw", 'Int'>
  readonly server_to_client: Prisma.FieldRef<"raw", 'Int'>
  readonly blob: Prisma.FieldRef<"raw", 'Bytes'>
}
    

// Custom InputTypes
/**
 * raw findUnique
 */
export type rawFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the raw
   */
  select?: Prisma.rawSelect<ExtArgs> | null
  /**
   * Omit specific fields from the raw
   */
  omit?: Prisma.rawOmit<ExtArgs> | null
  /**
   * Filter, which raw to fetch.
   */
  where: Prisma.rawWhereUniqueInput
}

/**
 * raw findUniqueOrThrow
 */
export type rawFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the raw
   */
  select?: Prisma.rawSelect<ExtArgs> | null
  /**
   * Omit specific fields from the raw
   */
  omit?: Prisma.rawOmit<ExtArgs> | null
  /**
   * Filter, which raw to fetch.
   */
  where: Prisma.rawWhereUniqueInput
}

/**
 * raw findFirst
 */
export type rawFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the raw
   */
  select?: Prisma.rawSelect<ExtArgs> | null
  /**
   * Omit specific fields from the raw
   */
  omit?: Prisma.rawOmit<ExtArgs> | null
  /**
   * Filter, which raw to fetch.
   */
  where?: Prisma.rawWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of raws to fetch.
   */
  orderBy?: Prisma.rawOrderByWithRelationInput | Prisma.rawOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for raws.
   */
  cursor?: Prisma.rawWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` raws from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` raws.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of raws.
   */
  distinct?: Prisma.RawScalarFieldEnum | Prisma.RawScalarFieldEnum[]
}

/**
 * raw findFirstOrThrow
 */
export type rawFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the raw
   */
  select?: Prisma.rawSelect<ExtArgs> | null
  /**
   * Omit specific fields from the raw
   */
  omit?: Prisma.rawOmit<ExtArgs> | null
  /**
   * Filter, which raw to fetch.
   */
  where?: Prisma.rawWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of raws to fetch.
   */
  orderBy?: Prisma.rawOrderByWithRelationInput | Prisma.rawOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for raws.
   */
  cursor?: Prisma.rawWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` raws from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` raws.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of raws.
   */
  distinct?: Prisma.RawScalarFieldEnum | Prisma.RawScalarFieldEnum[]
}

/**
 * raw findMany
 */
export type rawFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the raw
   */
  select?: Prisma.rawSelect<ExtArgs> | null
  /**
   * Omit specific fields from the raw
   */
  omit?: Prisma.rawOmit<ExtArgs> | null
  /**
   * Filter, which raws to fetch.
   */
  where?: Prisma.rawWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of raws to fetch.
   */
  orderBy?: Prisma.rawOrderByWithRelationInput | Prisma.rawOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing raws.
   */
  cursor?: Prisma.rawWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` raws from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` raws.
   */
  skip?: number
  distinct?: Prisma.RawScalarFieldEnum | Prisma.RawScalarFieldEnum[]
}

/**
 * raw create
 */
export type rawCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the raw
   */
  select?: Prisma.rawSelect<ExtArgs> | null
  /**
   * Omit specific fields from the raw
   */
  omit?: Prisma.rawOmit<ExtArgs> | null
  /**
   * The data needed to create a raw.
   */
  data: Prisma.XOR<Prisma.rawCreateInput, Prisma.rawUncheckedCreateInput>
}

/**
 * raw createMany
 */
export type rawCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many raws.
   */
  data: Prisma.rawCreateManyInput | Prisma.rawCreateManyInput[]
}

/**
 * raw createManyAndReturn
 */
export type rawCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the raw
   */
  select?: Prisma.rawSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the raw
   */
  omit?: Prisma.rawOmit<ExtArgs> | null
  /**
   * The data used to create many raws.
   */
  data: Prisma.rawCreateManyInput | Prisma.rawCreateManyInput[]
}

/**
 * raw update
 */
export type rawUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the raw
   */
  select?: Prisma.rawSelect<ExtArgs> | null
  /**
   * Omit specific fields from the raw
   */
  omit?: Prisma.rawOmit<ExtArgs> | null
  /**
   * The data needed to update a raw.
   */
  data: Prisma.XOR<Prisma.rawUpdateInput, Prisma.rawUncheckedUpdateInput>
  /**
   * Choose, which raw to update.
   */
  where: Prisma.rawWhereUniqueInput
}

/**
 * raw updateMany
 */
export type rawUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update raws.
   */
  data: Prisma.XOR<Prisma.rawUpdateManyMutationInput, Prisma.rawUncheckedUpdateManyInput>
  /**
   * Filter which raws to update
   */
  where?: Prisma.rawWhereInput
  /**
   * Limit how many raws to update.
   */
  limit?: number
}

/**
 * raw updateManyAndReturn
 */
export type rawUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the raw
   */
  select?: Prisma.rawSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the raw
   */
  omit?: Prisma.rawOmit<ExtArgs> | null
  /**
   * The data used to update raws.
   */
  data: Prisma.XOR<Prisma.rawUpdateManyMutationInput, Prisma.rawUncheckedUpdateManyInput>
  /**
   * Filter which raws to update
   */
  where?: Prisma.rawWhereInput
  /**
   * Limit how many raws to update.
   */
  limit?: number
}

/**
 * raw upsert
 */
export type rawUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the raw
   */
  select?: Prisma.rawSelect<ExtArgs> | null
  /**
   * Omit specific fields from the raw
   */
  omit?: Prisma.rawOmit<ExtArgs> | null
  /**
   * The filter to search for the raw to update in case it exists.
   */
  where: Prisma.rawWhereUniqueInput
  /**
   * In case the raw found by the `where` argument doesn't exist, create a new raw with this data.
   */
  create: Prisma.XOR<Prisma.rawCreateInput, Prisma.rawUncheckedCreateInput>
  /**
   * In case the raw was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.rawUpdateInput, Prisma.rawUncheckedUpdateInput>
}

/**
 * raw delete
 */
export type rawDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the raw
   */
  select?: Prisma.rawSelect<ExtArgs> | null
  /**
   * Omit specific fields from the raw
   */
  omit?: Prisma.rawOmit<ExtArgs> | null
  /**
   * Filter which raw to delete.
   */
  where: Prisma.rawWhereUniqueInput
}

/**
 * raw deleteMany
 */
export type rawDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which raws to delete
   */
  where?: Prisma.rawWhereInput
  /**
   * Limit how many raws to delete.
   */
  limit?: number
}

/**
 * raw without action
 */
export type rawDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the raw
   */
  select?: Prisma.rawSelect<ExtArgs> | null
  /**
   * Omit specific fields from the raw
   */
  omit?: Prisma.rawOmit<ExtArgs> | null
}
